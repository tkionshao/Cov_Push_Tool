DELIMITER $$
USE `gt_gw_main`$$
DROP PROCEDURE IF EXISTS `SP_CreateDB_LTE`$$
CREATE DEFINER=`covmo`@`%` PROCEDURE `SP_Sub_Generate_Overshooting_Severity`(IN gt_db VARCHAR(100),IN GT_COVMO VARCHAR(100))
BEGIN	
	DECLARE RNC_ID INT;
 	DECLARE O_GT_DB VARCHAR(100) DEFAULT GT_DB;
	DECLARE SH_EH VARCHAR(9) DEFAULT RIGHT(GT_DB,9);	
	DECLARE START_TIME DATETIME DEFAULT SYSDATE();	
	DECLARE CURRENT_NT_DB VARCHAR(50) DEFAULT CONCAT('gt_nt_',gt_strtok(GT_DB,3,'_'));
		
	SET @SqlCmd=CONCAT('SELECT att_value INTO @SYS_CONFIG_TILE FROM ',CURRENT_NT_DB,'.`sys_config` WHERE `group_name`=''system'' AND att_name = ''MapResolution'';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
		
	IF gt_covmo_csv_count(@SYS_CONFIG_TILE,',') =3 THEN
		
		SET @SqlCmd=CONCAT('SELECT gt_covmo_csv_get(att_value,3) INTO @ZOOM_LEVEL FROM ',CURRENT_NT_DB,'.`sys_config` WHERE `group_name`=''system'' AND att_name = ''MapResolution'';');
		PREPARE Stmt FROM @SqlCmd;
		EXECUTE Stmt;
		DEALLOCATE PREPARE Stmt;
	ELSE 
		SET @SqlCmd=CONCAT('SELECT att_value INTO @ZOOM_LEVEL FROM ',CURRENT_NT_DB,'.`sys_config` WHERE `group_name`=''system'' AND att_name = ''MapResolution'';');
		PREPARE Stmt FROM @SqlCmd;
		EXECUTE Stmt;
		DEALLOCATE PREPARE Stmt;
	END IF;
	
	SET @SqlCmd=CONCAT('SELECT att_value INTO @O_RSCP FROM ',CURRENT_NT_DB,'.`sys_config` WHERE att_name = ''Overshoot_RSCP'' AND group_name = ''overshooting'';;');	
	PREPARE stmt FROM @sqlcmd;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	
	
	SELECT gt_strtok(GT_DB,2,'_') INTO RNC_ID;
	CALL SP_Sub_Set_Session_Param(GT_DB);	 			
        	
		
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_SUB_GENERATE_OVERSHOOTING_SERVERITY','Start', START_TIME);
	
	SET @SqlCmd=CONCAT('TRUNCATE TABLE  ',GT_DB,'.table_overshooting_severity;');	
	PREPARE stmt FROM @sqlcmd;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	
		
	SET @SqlCmd=CONCAT('TRUNCATE TABLE  ',GT_DB,'.table_overshooting_severity_detail;');
	PREPARE stmt FROM @sqlcmd;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Overshooting_Severity','Step1', NOW());
	SET @SQLCMD =CONCAT('DROP TEMPORARY TABLE IF EXISTS ',GT_DB ,'.TMP_NT_OVERSHOOTING_DISTANCE;');
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT; 
	
	SET @SQLCMD =CONCAT(' CREATE TEMPORARY TABLE ',GT_DB ,'.TMP_NT_OVERSHOOTING_DISTANCE ENGINE = MYISAM 
				SELECT
				  A.RNC_ID,
				  A.CELL_ID,
				  ((1.5-A.SITE_DENSITY_TYPE/10) * B.PATHLOSS_DISTANCE) AS BASE_DISTANCE,
				  B.LONGITUDE AS CELL_LON_T,
				  B.LATITUDE AS CELL_LAT_T,
				  B.ANTENNA_RADIUS,
				  B.CLOSED_RADIUS
				FROM ',CURRENT_NT_DB,'.nt_current A, ',CURRENT_NT_DB,'.nt_antenna_current B
				WHERE A.RNC_ID = B.RNC_ID AND A.CELL_ID = B.CELL_ID AND A.INDOOR = 0;');
		       
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_SUB_GENERATE_OVERSHOOTING_SERVERITY','Step2', NOW());			
	
	SET @SQLCMD=CONCAT('CREATE INDEX TMP_NT_OVERSHOOTING_DISTANCE_IDX 
				ON ',GT_DB ,'.TMP_NT_OVERSHOOTING_DISTANCE
				(CELL_ID,RNC_ID);');
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT; 
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_SUB_GENERATE_OVERSHOOTING_SERVERITY','Step3', NOW());
	
	SET @SQLCMD =CONCAT('INSERT INTO ',GT_DB,'.TABLE_OVERSHOOTING_SEVERITY_DETAIL
	(DATA_DATE,FREQUENCY,UARFCN,TILE_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID
	,CELL_ID,CELL_NAME,BASE_DISTANCE,DISTANCE,AREA_FLAG,OVERSHOOT_FLAG,OVERSHOOT_CALL_CNT,RSCP_FLAG,CALL_CNT,AVG_RSCP )	
	
			SELECT 
				DATA_DATE,FREQUENCY,UARFCN,TILE_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID
				,CELL_ID,CELL_NAME
				,BASE_DISTANCE
				,SUM(CASE WHEN OVERSHOOT_FLAG = 1 THEN DISTANCE ELSE 0 END)/SUM(CASE WHEN OVERSHOOT_FLAG = 1 THEN 1 ELSE 0 END) AS DISTANCE
				,MAX(AREA_FLAG) AS AREA_FLAG
				,MAX(OVERSHOOT_FLAG) AS OVERSHOOT_FLAG
				,SUM(OVERSHOOT_FLAG) AS OVERSHOOT_CALL_CNT
				,MAX(RSCP_FLAG) AS RSCP_FLAG
				,COUNT(*) AS CALL_CNT
				,SUM(CASE WHEN OVERSHOOT_FLAG = 1 THEN POS_FIRST_RSCP ELSE 0 END)/SUM(CASE WHEN OVERSHOOT_FLAG = 1 THEN 1 ELSE 0 END) AS AVG_RSCP
			FROM (
				SELECT
					 DATA_DATE
					, POS_FIRST_FREQUENCY AS FREQUENCY
					, POS_FIRST_UARFCN AS UARFCN
					, gt_covmo_proj_geohash_to_hex_geohash(POS_FIRST_LOC, ',@ZOOM_LEVEL,') AS TILE_ID
					, GT_COVMO_PROJ_GEOHASH_TO_LNG(POS_FIRST_LOC) AS TILE_LON
					, GT_COVMO_PROJ_GEOHASH_TO_LAT(POS_FIRST_LOC) AS TILE_LAT
					, POS_FIRST_RNC AS RNC_ID
					, POS_FIRST_CELL_INDOOR AS CELL_INDOOR
					, POS_FIRST_CLUSTER AS CLUSTER_ID
					, POS_FIRST_SITE AS SITE_ID
					, POS_FIRST_CELL AS CELL_ID
					, POS_FIRST_CELL_NAME AS CELL_NAME
					, B.BASE_DISTANCE AS BASE_DISTANCE
					, CASE WHEN GT_COVMO_DISTANCE(CELL_LON_T,CELL_LAT_T,GT_COVMO_PROJ_GEOHASH_TO_LNG(POS_FIRST_LOC),GT_COVMO_PROJ_GEOHASH_TO_LAT(POS_FIRST_LOC))
					    > B.BASE_DISTANCE
					    AND POS_FIRST_RSCP > ',@O_RSCP,' 
					    AND CALL_STATUS = 2 THEN GT_COVMO_DISTANCE(CELL_LON_T,CELL_LAT_T,GT_COVMO_PROJ_GEOHASH_TO_LNG(POS_FIRST_LOC),GT_COVMO_PROJ_GEOHASH_TO_LAT(POS_FIRST_LOC)) 
					    END AS DISTANCE	
					, CASE WHEN GT_COVMO_DISTANCE(CELL_LON_T,CELL_LAT_T,GT_COVMO_PROJ_GEOHASH_TO_LNG(POS_FIRST_LOC),GT_COVMO_PROJ_GEOHASH_TO_LAT(POS_FIRST_LOC))
						> B.BASE_DISTANCE THEN 1 ELSE 0 END AS AREA_FLAG
					, CASE WHEN GT_COVMO_DISTANCE(CELL_LON_T,CELL_LAT_T,GT_COVMO_PROJ_GEOHASH_TO_LNG(POS_FIRST_LOC),GT_COVMO_PROJ_GEOHASH_TO_LAT(POS_FIRST_LOC))
						> B.BASE_DISTANCE
						AND POS_FIRST_RSCP > ',@O_RSCP,' 
						AND CALL_STATUS = 2 THEN 1 ELSE 0 END AS OVERSHOOT_FLAG
					, CASE WHEN POS_FIRST_RSCP > ',@O_RSCP,'  THEN 1 ELSE 0 END AS RSCP_FLAG
					, POS_FIRST_RSCP
				FROM ',GT_DB ,'.TABLE_CALL A, ',GT_DB ,'.TMP_NT_OVERSHOOTING_DISTANCE B
				WHERE POS_FIRST_RSCP IS NOT NULL AND POS_FIRST_RNC= ',RNC_ID,' 
					AND A.POS_FIRST_RNC = B.RNC_ID AND A.POS_FIRST_CELL = B.CELL_ID
			) A
			GROUP BY  
				DATA_DATE
				, FREQUENCY
				, UARFCN
				, TILE_ID
				, RNC_ID
				, CELL_INDOOR
				, CLUSTER_ID
				, SITE_ID
				, CELL_ID
			ORDER BY NULL ');       	       	
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_SUB_GENERATE_OVERSHOOTING_SERVERITY','Step4', NOW());
	SET @SQLCMD =CONCAT('INSERT INTO ',GT_DB,'.TABLE_OVERSHOOTING_SEVERITY
	(DATA_DATE,FREQUENCY,UARFCN,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID
	,CELL_ID,CELL_NAME,BASE_DISTANCE,T1_CALL_CNT,T0_CALL_CNT,AVG_DISTANCE,MAX_DISTANCE,T0_TILE_CNT
	,T1_TILE_CNT,T1_RSCP_TILE_COUNT)	
	
			SELECT 
				DATA_DATE,FREQUENCY,UARFCN,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID
				,CELL_ID,CELL_NAME
				,MAX(BASE_DISTANCE) AS BASE_DISTANCE
				,SUM(OVERSHOOT_CALL_CNT) AS T1_CALL_CNT
				,SUM(CALL_CNT - OVERSHOOT_CALL_CNT) AS T0_CALL_CNT
				,SUM(CASE WHEN OVERSHOOT_FLAG=1 THEN DISTANCE*OVERSHOOT_CALL_CNT END)/SUM(CASE WHEN OVERSHOOT_FLAG=1 THEN OVERSHOOT_CALL_CNT END) AS AVG_DISTANCE
				,MAX(CASE WHEN OVERSHOOT_FLAG=1 THEN DISTANCE END) AS MAX_DISTANCE
				,SUM(CASE WHEN OVERSHOOT_FLAG=1 THEN 0 ELSE 1 END) AS T0_TILE_CNT
				,SUM(CASE WHEN OVERSHOOT_FLAG=1 THEN 1 ELSE 0 END) AS T1_TILE_CNT
				,SUM(CASE WHEN OVERSHOOT_FLAG=1 THEN 1 ELSE 0 END) AS T1_RSCP_TILE_COUNT
			FROM ',GT_DB,'.TABLE_OVERSHOOTING_SEVERITY_DETAIL
			GROUP BY  
				DATA_DATE
				, FREQUENCY
				, UARFCN
				, RNC_ID
				, CELL_INDOOR
				, CLUSTER_ID
				, SITE_ID
				, CELL_ID
			ORDER BY NULL ');       	       	
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_SUB_GENERATE_OVERSHOOTING_SERVERITY','Step5', NOW());
	
	SET @SQLCMD =CONCAT('INSERT INTO ',GT_DB,'.`table_overshooting_severity_event`
			    (`DATA_DATE`,
			     `FREQUENCY`,
			     `UARFCN`,
			     `RNC_ID`,
			     `CLUSTER_ID`,
			     `SITE_ID`,
			     `CELL_ID`,
			     `CELL_NAME`,
			     `ANTENNA_RADIUS`,
			     `CLOSED_RADIUS`,
			     `AS_T1_EVENT_CNT`,
			     `AS_T0_EVENT_CNT`,
			     `AS_T1_TILE_CNT`,
			     `AS_T0_TILE_CNT`,
			     `BEST_T1_EVENT_CNT`,
			     `BEST_T0_EVENT_CNT`,
			     `BEST_T1_TILE_CNT`,
			     `BEST_T0_TILE_CNT`)
			SELECT A.DATA_DATE,
				A.FREQUENCY,
				A.UARFCN,
				A.RNC_ID,
				A.CLUSTER_ID,
				A.SITE_ID,
				A.CELL_ID,
				A.CELL_NAME,
				B.ANTENNA_RADIUS,
				B.CLOSED_RADIUS,
				SUM(A.OVER_LOC_CNT) AS AS_T1_EVENT_CNT,
				SUM(A.NON_OVER_LOC_CNT) AS AS_T0_EVENT_CNT,
				SUM(CASE WHEN A.OVER_LOC_CNT>0 THEN 1 ELSE 0 END) AS AS_T1_TILE_CNT,
				SUM(CASE WHEN (A.NON_OVER_LOC_CNT>0 AND A.OVER_LOC_CNT=0) THEN 1 ELSE 0 END) AS AS_T0_TILE_CNT,
				SUM(A.BEST_OVER_LOC_CNT) AS BEST_T1_EVENT_CNT,
				SUM(A.BEST_NON_OVER_LOC_CNT) AS BEST_T0_EVENT_CNT,
				SUM(CASE WHEN A.BEST_OVER_LOC_CNT>0 THEN 1 ELSE 0 END) AS BEST_T1_TILE_CNT,
				SUM(CASE WHEN (A.BEST_NON_OVER_LOC_CNT>0 AND A.BEST_OVER_LOC_CNT=0) THEN 1 ELSE 0 END) AS BEST_T0_TILE_CNT
				FROM ',GT_DB,'.table_tile_fp_dy A
				JOIN ',GT_DB,'.TMP_NT_OVERSHOOTING_DISTANCE B
				WHERE A.RNC_ID = B.RNC_ID AND A.CELL_ID = B.CELL_ID
				GROUP BY A.RNC_ID,A.CELL_ID
				 ;');
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT;		
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_SUB_GENERATE_OVERSHOOTING_SERVERITY',CONCAT('Done: ',TIMESTAMPDIFF(SECOND,START_TIME,SYSDATE()),' seconds.'), NOW());	
		
END$$
DELIMITER ;
