DELIMITER $$
USE `gt_gw_main`$$
DROP PROCEDURE IF EXISTS `SP_CreateDB_LTE`$$
CREATE DEFINER=`covmo`@`%` PROCEDURE `SP_Sub_Generate_Erlang_FP_BS_AGR`(IN GT_DB VARCHAR(100), IN KIND VARCHAR(20), IN VENDOR_SOURCE VARCHAR(20),IN GT_COVMO VARCHAR(100))
BEGIN
       	DECLARE RNC_ID INT;
	DECLARE O_GT_DB VARCHAR(100) DEFAULT GT_DB;
	DECLARE START_TIME DATETIME DEFAULT SYSDATE();
	DECLARE GT_DATE VARCHAR(18) DEFAULT RIGHT(GT_DB,18);
	DECLARE PARTITION_ID INT DEFAULT SUBSTRING(RIGHT(GT_DB,18),10,2) ;
	DECLARE STARTHOUR VARCHAR(2) DEFAULT SUBSTRING(RIGHT(GT_DB,18),10,2);
	DECLARE ENDHOUR VARCHAR(2) DEFAULT IF(SUBSTRING(RIGHT(GT_DB,18),15,2)='00','24',SUBSTRING(RIGHT(GT_DB,18),15,2));
	DECLARE SH_EH VARCHAR(9) DEFAULT RIGHT(GT_DB,9);
	DECLARE RUN VARCHAR(20);
	DECLARE WORKER_ID VARCHAR(10) DEFAULT CONNECTION_ID();
	DECLARE CURRENT_NT_DB VARCHAR(50) DEFAULT CONCAT('gt_nt_',gt_strtok(GT_DB,3,'_'));
        SET SESSION max_heap_table_size = 1024*1024*1024*4; 
        SET SESSION tmp_table_size = 1024*1024*1024*4; 
        SET SESSION join_buffer_size = 1024*1024*1024; 
        SET SESSION sort_buffer_size = 1024*1024*1024; 
        SET SESSION read_buffer_size = 1024*1024*1024; 
        
 	SELECT gt_strtok(GT_DB,2,'_') INTO RNC_ID;
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert data to table_tile_erlang_fp_bs-Start ', NOW());
	
	
	CALL SP_Sub_Set_Session_Param(GT_DB);
	SELECT REPLACE(GT_DB,SH_EH,'0000_0000') INTO GT_DB;
	
	IF VENDOR_SOURCE = 'GW' THEN
		IF KIND = 'DAILY' THEN
			SET RUN = '_tmp';
		ELSEIF KIND = 'RERUN' THEN
			SET RUN = '_rerun';
		END IF;
	ELSEIF VENDOR_SOURCE = 'AP' THEN
		SET RUN = '';
	END IF;
	
	SET @SqlCmd=CONCAT('SELECT att_value INTO @SYS_CONFIG_TILE FROM ',CURRENT_NT_DB,'.`sys_config` WHERE `group_name`=''system'' AND att_name = ''MapResolution'';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
		
	IF gt_covmo_csv_count(@SYS_CONFIG_TILE,',') =3 THEN
		
		SET @SqlCmd=CONCAT('SELECT gt_covmo_csv_get(att_value,3) INTO @ZOOM_LEVEL FROM ',CURRENT_NT_DB,'.`sys_config` WHERE `group_name`=''system'' AND att_name = ''MapResolution'';');
		PREPARE Stmt FROM @SqlCmd;
		EXECUTE Stmt;
		DEALLOCATE PREPARE Stmt;
	ELSE 
		SET @SqlCmd=CONCAT('SELECT att_value INTO @ZOOM_LEVEL FROM ',CURRENT_NT_DB,'.`sys_config` WHERE `group_name`=''system'' AND att_name = ''MapResolution'';');
		PREPARE Stmt FROM @SqlCmd;
		EXECUTE Stmt;
		DEALLOCATE PREPARE Stmt;
	END IF;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_erlang_fp_bs TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_erlang_fp_bs_t TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_erlang_fp_bs_c TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_erlang_fp_bs_def TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_erlang_fp_bs_t_def TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_erlang_fp_bs_c_def TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Create temp table table_tile_erlang_fp_bs ', NOW());
	
	SET @SqlCmd=CONCAT('DROP TEMPORARY TABLE  IF EXISTS ',GT_DB,RUN,'.tmp_table_tile_erlang_fp_bs_',WORKER_ID,';');
	PREPARE stmt FROM @sqlcmd;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	SET @SqlCmd=CONCAT('CREATE TEMPORARY TABLE ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'` (
					`DATA_DATE` DATE DEFAULT NULL,
					`DATA_HOUR` TINYINT(4) DEFAULT NULL,
					`INDOOR` TINYINT(4) DEFAULT NULL,
					`MOVING` TINYINT(4) DEFAULT NULL,
					`TILE_ID` BIGINT(20) DEFAULT NULL,
					`CELL_ID` MEDIUMINT(9) DEFAULT NULL,
					`RNC_ID` MEDIUMINT(9) DEFAULT NULL,
					`CALL_TYPE` TINYINT(4) DEFAULT NULL,
					`CALL_STATUS` TINYINT(4) DEFAULT NULL,
					`CNT` MEDIUMINT(9) DEFAULT ''0'',
					`ERLANG` DOUBLE DEFAULT NULL,
					-- CALC FOR TILE AND CELL
					-- update
					`FREQUENCY` SMALLINT(6) DEFAULT NULL,
					`UARFCN` SMALLINT(6) DEFAULT NULL,
					`SITE_ID` VARCHAR(20) DEFAULT NULL,
					`CELL_LON` DOUBLE DEFAULT NULL,
					`CELL_LAT` DOUBLE DEFAULT NULL,
					`CLUSTER_ID` MEDIUMINT(9) DEFAULT NULL,
					`CELL_INDOOR` TINYINT(4) DEFAULT NULL
				) ENGINE=MYISAM DEFAULT CHARSET=latin1;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt; 
	
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to tmp_table_tile_erlang_fp_bs', NOW());
	
	SET @SqlCmd=CONCAT('INSERT INTO   ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
				(`DATA_DATE`,
				     `DATA_HOUR`,
				     `FREQUENCY`,
				     `UARFCN`,
				     `INDOOR`,
				     `MOVING`,
				     `TILE_ID`,
				     `RNC_ID`,
				     `CELL_INDOOR`,
				     `CLUSTER_ID`,
				     `SITE_ID`,
				     `CELL_ID`,
				     `CALL_TYPE`,
				     `CALL_STATUS`,
				     `CELL_LON`,
				     `CELL_LAT`,
				     `CNT`,
				     `ERLANG`)
				SELECT
				  `DATA_DATE`,
				  `DATA_HOUR`,
				  `FREQUENCY`,
				  `UARFCN`,
				  `INDOOR`,
				  `MOVING`,
				  `TILE_ID`,
				  `RNC_ID`,
				  `CELL_INDOOR`,
				  `CLUSTER_ID`,
				  `SITE_ID`,
				  `CELL_ID`,
				  `CALL_TYPE`,
				  `CALL_STATUS`,
				  `CELL_LON`,
				  `CELL_LAT`,
				  SUM(`CNT`) AS `CNT`,
				  SUM(`ERLANG`) AS `ERLANG`
				FROM ',GT_DB,RUN,'.`table_tile_erlang_fp_bs_update`
				WHERE DATA_HOUR >= ',STARTHOUR,' AND DATA_HOUR < ',ENDHOUR,'
				AND RNC_ID=',RNC_ID,'
				GROUP BY `DATA_DATE`,
				  `DATA_HOUR`,
				  `TILE_ID`,
				  `RNC_ID`,
				  `CELL_ID`,
				  `CALL_TYPE`,
				  `CALL_STATUS`,
				  `INDOOR`,
				  `MOVING`
				  ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Update table_tile_erlang_fp_bs-FREQUENCY, SITE_ID, DL_UARFCN, CELL_LON, CELL_LAT ', NOW());
	
	SET @SqlCmd=CONCAT('UPDATE ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'` A, ',CURRENT_NT_DB,'.nt_current B
			    SET A.FREQUENCY=B.FREQUENCY
				,A.UARFCN=B.DL_UARFCN
				,A.SITE_ID=B.SITE_ID
				,A.CELL_LON=B.LONGITUDE
				,A.CELL_LAT=B.LATITUDE
				,A.CLUSTER_ID=B.CLUSTER_ID
				,A.CELL_INDOOR=B.INDOOR
				WHERE A.RNC_ID=B.RNC_ID 
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO  ',GT_DB,RUN,'.`table_tile_erlang_fp_bs`	
					(DATA_DATE,DATA_HOUR,INDOOR,MOVING,TILE_ID,CELL_ID,RNC_ID,CALL_TYPE,CALL_STATUS,CNT,ERLANG
					,FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 					,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 					,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
				SELECT
					 DATA_DATE,DATA_HOUR,INDOOR,MOVING,TILE_ID,CELL_ID,RNC_ID,CALL_TYPE,CALL_STATUS,CNT,ERLANG
					,FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 					,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 					,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_t', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO  ',GT_DB,RUN,'.`table_tile_erlang_fp_bs_t`
				(DATA_DATE,DATA_HOUR,INDOOR,MOVING,TILE_ID,RNC_ID,CALL_TYPE,CALL_STATUS,CNT,ERLANG
				,FREQUENCY,UARFCN
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
				SELECT  
				DATA_DATE
				, DATA_HOUR
				, INDOOR
				, MOVING
				, TILE_ID
				#, CELL_ID
				, RNC_ID
				, CALL_TYPE
				, CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY,UARFCN
-- 				,SUM(CALL_STATUS_BLOCK)
-- 				,SUM(CALL_STATUS_SUCCESS)
-- 				,SUM(CALL_STATUS_DROP)
-- 				,SUM(CALL_TYPE_SMS)
-- 				,SUM(CALL_TYPE_VOICE)
-- 				,SUM(CALL_TYPE_VEDIO)
-- 				,SUM(CALL_TYPE_PS99)
-- 				,SUM(CALL_TYPE_HSPA)
-- 				,SUM(CALL_TYPE_MRAB)
-- 				,SUM(CALL_TYPE_PSOTHERS)
-- 				,SUM(CALL_TYPE_CS)
-- 				,SUM(CALL_TYPE_PS)
				FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
				GROUP BY 
					 DATA_DATE
					, DATA_HOUR
					, INDOOR
					, MOVING
					, TILE_ID
					#, CELL_ID
					, RNC_ID
					, CALL_TYPE
					, CALL_STATUS
				ORDER BY NULL	;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_c', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO  ',GT_DB,RUN,'.`table_tile_erlang_fp_bs_c`
				(DATA_DATE,DATA_HOUR,INDOOR,MOVING,CELL_ID,RNC_ID,CALL_TYPE,CALL_STATUS,CNT,ERLANG
				,FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
				SELECT  
				DATA_DATE
				, DATA_HOUR
				, INDOOR
				, MOVING
				#, TILE_ID
				, CELL_ID
				, RNC_ID
				, CALL_TYPE
				, CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
				GROUP BY 
					 DATA_DATE
					, DATA_HOUR
					, INDOOR
					, MOVING
					#, TILE_ID
					, CELL_ID
					, RNC_ID
					, CALL_TYPE
					, CALL_STATUS
				ORDER BY NULL	;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_def', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO  ',GT_DB,RUN,'.`table_tile_erlang_fp_bs_def`
				(DATA_DATE,DATA_HOUR,FREQUENCY,UARFCN,TILE_ID,CELL_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,CNT,ERLANG
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
				SELECT  
				DATA_DATE
				, DATA_HOUR
				, FREQUENCY
				, UARFCN
				#, INDOOR
				#, MOVING
				, TILE_ID
				, CELL_ID
				, RNC_ID
				, CELL_INDOOR
				, CLUSTER_ID
				, SITE_ID
				#, CALL_TYPE
				#, CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
				GROUP BY 
					 DATA_DATE
					, DATA_HOUR
					#, INDOOR
					#, MOVING
					, TILE_ID
					, CELL_ID
					, RNC_ID
					#, CALL_TYPE
					#, CALL_STATUS
				ORDER BY NULL	;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_t_def', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO  ',GT_DB,RUN,'.`table_tile_erlang_fp_bs_t_def`
				(DATA_DATE,DATA_HOUR,TILE_ID,RNC_ID,CNT,ERLANG
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
				SELECT  
				DATA_DATE
				, DATA_HOUR
				#, INDOOR
				#, MOVING
				, TILE_ID
				#, CELL_ID
				, RNC_ID
				#, CALL_TYPE
				#, CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
				GROUP BY 
					 DATA_DATE
					, DATA_HOUR
					#, INDOOR
					#, MOVING
					, TILE_ID
					#, CELL_ID
					, RNC_ID
					#, CALL_TYPE
					#, CALL_STATUS
				ORDER BY NULL	;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_c_def', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO  ',GT_DB,RUN,'.`table_tile_erlang_fp_bs_c_def`
				(DATA_DATE,DATA_HOUR,FREQUENCY,UARFCN,CELL_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,CNT,ERLANG
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
				SELECT  
				DATA_DATE
				, DATA_HOUR
				, FREQUENCY
				, UARFCN
				#, INDOOR
				#, MOVING
				#, TILE_ID
				, CELL_ID
				, RNC_ID
				, CELL_INDOOR
				, CLUSTER_ID
				, SITE_ID
				#, CALL_TYPE
				#, CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
				GROUP BY 
					 DATA_DATE
					, DATA_HOUR
					#, INDOOR
					#, MOVING
					#, TILE_ID
					, CELL_ID
					, RNC_ID
					#, CALL_TYPE
					#, CALL_STATUS
				ORDER BY NULL	;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_dy', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_erlang_fp_bs_dy
 		(DATA_DATE,INDOOR,MOVING,TILE_ID,CELL_ID,RNC_ID,CALL_TYPE,CALL_STATUS,CNT,ERLANG
		,FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			B.DATA_DATE
			#, DATA_HOUR
			, B.INDOOR
			, B.MOVING
			, B.TILE_ID
			, B.CELL_ID
			, B.RNC_ID
			, B.CALL_TYPE
			, B.CALL_STATUS
			, CASE WHEN A.CNT IS NULL AND B.CNT IS NULL THEN NULL ELSE IFNULL(A.CNT,0) + IFNULL(B.CNT,0) END AS CNT
			, CASE WHEN A.ERLANG IS NULL AND B.ERLANG IS NULL THEN NULL ELSE IFNULL(A.ERLANG,0) + IFNULL(B.ERLANG,0) END AS ERLANG
			, B.FREQUENCY,B.UARFCN,B.SITE_ID,B.CELL_LON,B.CELL_LAT,B.CLUSTER_ID,B.CELL_INDOOR 
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_erlang_fp_bs_dy a RIGHT JOIN 
		(
		 	SELECT
				DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				, INDOOR AS INDOOR
				, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				, CELL_ID AS CELL_ID
				, RNC_ID AS RNC_ID
				, CALL_TYPE AS CALL_TYPE
				, CALL_STATUS AS CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY AS FREQUENCY
				, UARFCN AS UARFCN
				, SITE_ID AS SITE_ID
				, CELL_LON AS CELL_LON
				, CELL_LAT AS CELL_LAT
				, CLUSTER_ID AS CLUSTER_ID
				, CELL_INDOOR AS CELL_INDOOR
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS     
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE   
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO   
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99    
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA    
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB    
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS      
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
			GROUP BY 
				 DATA_DATE
				#, DATA_HOUR
				, INDOOR
				, MOVING
				, TILE_ID
				, CELL_ID
				, RNC_ID
				, CALL_TYPE
				, CALL_STATUS
			ORDER BY NULL
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		AND A.INDOOR=B.INDOOR
		AND A.MOVING=B.MOVING
		AND A.TILE_ID=B.TILE_ID
		AND A.CELL_ID=B.CELL_ID
		AND A.RNC_ID=B.RNC_ID
		AND A.CALL_TYPE=B.CALL_TYPE
		AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_dy_t', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_erlang_fp_bs_dy_t
 		(DATA_DATE,INDOOR,MOVING,TILE_ID,RNC_ID,CALL_TYPE,CALL_STATUS,CNT,ERLANG
		,FREQUENCY,UARFCN
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			B.DATA_DATE
			#, DATA_HOUR
			, B.INDOOR
			, B.MOVING
			, B.TILE_ID
			#, B.CELL_ID
			, B.RNC_ID
			, B.CALL_TYPE
			, B.CALL_STATUS
			, CASE WHEN A.CNT IS NULL AND B.CNT IS NULL THEN NULL ELSE IFNULL(A.CNT,0) + IFNULL(B.CNT,0) END AS CNT
			, CASE WHEN A.ERLANG IS NULL AND B.ERLANG IS NULL THEN NULL ELSE IFNULL(A.ERLANG,0) + IFNULL(B.ERLANG,0) END AS ERLANG
			, B.FREQUENCY,B.UARFCN
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_erlang_fp_bs_dy_t a RIGHT JOIN 
		(
		 	SELECT
				DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				, INDOOR AS INDOOR
				, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				#, CELL_ID AS CELL_ID
				, RNC_ID AS RNC_ID
				, CALL_TYPE AS CALL_TYPE
				, CALL_STATUS AS CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY AS FREQUENCY
				, UARFCN AS UARFCN
				#, SITE_ID AS SITE_ID
				#, CLUSTER_ID AS CLUSTER_ID
				#, CELL_INDOOR AS CELL_INDOOR
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS     
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE   
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO   
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99    
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA    
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB    
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS      
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
			GROUP BY 
				 DATA_DATE
				#, DATA_HOUR
				, INDOOR
				, MOVING
				, TILE_ID
				#, CELL_ID
				, RNC_ID
				, CALL_TYPE
				, CALL_STATUS
			ORDER BY NULL
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		AND A.INDOOR=B.INDOOR
		AND A.MOVING=B.MOVING
		AND A.TILE_ID=B.TILE_ID
		#AND A.CELL_ID=B.CELL_ID
		AND A.RNC_ID=B.RNC_ID
		AND A.CALL_TYPE=B.CALL_TYPE
		AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_dy_c', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_erlang_fp_bs_dy_c
 		(DATA_DATE,INDOOR,MOVING,CELL_ID,RNC_ID,CALL_TYPE,CALL_STATUS,CNT,ERLANG
		,FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			B.DATA_DATE
			#, DATA_HOUR
			, B.INDOOR
			, B.MOVING
			#, B.TILE_ID
			, B.CELL_ID
			, B.RNC_ID
			, B.CALL_TYPE
			, B.CALL_STATUS
			, CASE WHEN A.CNT IS NULL AND B.CNT IS NULL THEN NULL ELSE IFNULL(A.CNT,0) + IFNULL(B.CNT,0) END AS CNT
			, CASE WHEN A.ERLANG IS NULL AND B.ERLANG IS NULL THEN NULL ELSE IFNULL(A.ERLANG,0) + IFNULL(B.ERLANG,0) END AS ERLANG
			, B.FREQUENCY,B.UARFCN,B.SITE_ID,B.CELL_LON,B.CELL_LAT,B.CLUSTER_ID,B.CELL_INDOOR 
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_erlang_fp_bs_dy_c a RIGHT JOIN 
		(
		 	SELECT
				DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				, INDOOR AS INDOOR
				, MOVING AS MOVING
				#, TILE_ID AS TILE_ID
				, CELL_ID AS CELL_ID
				, RNC_ID AS RNC_ID
				, CALL_TYPE AS CALL_TYPE
				, CALL_STATUS AS CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY AS FREQUENCY
				, UARFCN AS UARFCN
				, SITE_ID AS SITE_ID
				, CELL_LON AS CELL_LON
				, CELL_LAT AS CELL_LAT
				, CLUSTER_ID AS CLUSTER_ID
				, CELL_INDOOR AS CELL_INDOOR
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS     
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE   
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO   
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99    
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA    
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB    
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS      
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
			GROUP BY 
				 DATA_DATE
				#, DATA_HOUR
				, INDOOR
				, MOVING
				#, TILE_ID
				, CELL_ID
				, RNC_ID
				, CALL_TYPE
				, CALL_STATUS
			ORDER BY NULL
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		AND A.INDOOR=B.INDOOR
		AND A.MOVING=B.MOVING
		#AND A.TILE_ID=B.TILE_ID
		AND A.CELL_ID=B.CELL_ID
		AND A.RNC_ID=B.RNC_ID
		AND A.CALL_TYPE=B.CALL_TYPE
		AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_dy_def', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_erlang_fp_bs_dy_def
 		(DATA_DATE,TILE_ID,CELL_ID,RNC_ID,CNT,ERLANG
		,FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			B.DATA_DATE
			#, DATA_HOUR
			#, B.INDOOR
			#, B.MOVING
			, B.TILE_ID
			, B.CELL_ID
			, B.RNC_ID
			#, B.CALL_TYPE
			#, B.CALL_STATUS
			, CASE WHEN A.CNT IS NULL AND B.CNT IS NULL THEN NULL ELSE IFNULL(A.CNT,0) + IFNULL(B.CNT,0) END AS CNT
			, CASE WHEN A.ERLANG IS NULL AND B.ERLANG IS NULL THEN NULL ELSE IFNULL(A.ERLANG,0) + IFNULL(B.ERLANG,0) END AS ERLANG
			, B.FREQUENCY,B.UARFCN,B.SITE_ID,B.CELL_LON,B.CELL_LAT,B.CLUSTER_ID,B.CELL_INDOOR 
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_erlang_fp_bs_dy_def a RIGHT JOIN 
		(
		 	SELECT
				DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				#, INDOOR AS INDOOR
				#, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				, CELL_ID AS CELL_ID
				, RNC_ID AS RNC_ID
				#, CALL_TYPE AS CALL_TYPE
				#, CALL_STATUS AS CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY AS FREQUENCY
				, UARFCN AS UARFCN
				, SITE_ID AS SITE_ID
				, CELL_LON AS CELL_LON
				, CELL_LAT AS CELL_LAT
				, CLUSTER_ID AS CLUSTER_ID
				, CELL_INDOOR AS CELL_INDOOR
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS     
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE   
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO   
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99    
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA    
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB    
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS      
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
			GROUP BY 
				 DATA_DATE
				#, DATA_HOUR
				#, INDOOR
				#, MOVING
				, TILE_ID
				, CELL_ID
				, RNC_ID
				#, CALL_TYPE
				#, CALL_STATUS
			ORDER BY NULL
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		#AND A.INDOOR=B.INDOOR
		#AND A.MOVING=B.MOVING
		AND A.TILE_ID=B.TILE_ID
		AND A.CELL_ID=B.CELL_ID
		AND A.RNC_ID=B.RNC_ID
		#AND A.CALL_TYPE=B.CALL_TYPE
		#AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_dy_t_def', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_erlang_fp_bs_dy_t_def
 		(DATA_DATE,TILE_ID,RNC_ID,CNT,ERLANG
		,FREQUENCY,UARFCN
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			B.DATA_DATE
			#, DATA_HOUR
			#, B.INDOOR
			#, B.MOVING
			, B.TILE_ID
			#, B.CELL_ID
			, B.RNC_ID
			#, B.CALL_TYPE
			#, B.CALL_STATUS
			, CASE WHEN A.CNT IS NULL AND B.CNT IS NULL THEN NULL ELSE IFNULL(A.CNT,0) + IFNULL(B.CNT,0) END AS CNT
			, CASE WHEN A.ERLANG IS NULL AND B.ERLANG IS NULL THEN NULL ELSE IFNULL(A.ERLANG,0) + IFNULL(B.ERLANG,0) END AS ERLANG
			, B.FREQUENCY,B.UARFCN
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_erlang_fp_bs_dy_t_def a RIGHT JOIN 
		(
		 	SELECT
				DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				#, INDOOR AS INDOOR
				#, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				#, CELL_ID AS CELL_ID
				, RNC_ID AS RNC_ID
				#, CALL_TYPE AS CALL_TYPE
				#, CALL_STATUS AS CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY AS FREQUENCY
				, UARFCN AS UARFCN
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS     
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE   
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO   
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99    
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA    
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB    
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS      
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
			GROUP BY 
				 DATA_DATE
				#, DATA_HOUR
				#, INDOOR
				#, MOVING
				, TILE_ID
				#, CELL_ID
				, RNC_ID
				#, CALL_TYPE
				#, CALL_STATUS
			ORDER BY NULL
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		#AND A.INDOOR=B.INDOOR
		#AND A.MOVING=B.MOVING
		AND A.TILE_ID=B.TILE_ID
		#AND A.CELL_ID=B.CELL_ID
		AND A.RNC_ID=B.RNC_ID
		#AND A.CALL_TYPE=B.CALL_TYPE
		#AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS','Insert Data to table_tile_erlang_fp_bs_dy_c_def', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_erlang_fp_bs_dy_c_def
 		(DATA_DATE,CELL_ID,RNC_ID,CNT,ERLANG
		,FREQUENCY,UARFCN,SITE_ID,CELL_LON,CELL_LAT,CLUSTER_ID,CELL_INDOOR
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			B.DATA_DATE
			#, DATA_HOUR
			#, B.INDOOR
			#, B.MOVING
			#, B.TILE_ID
			, B.CELL_ID
			, B.RNC_ID
			#, B.CALL_TYPE
			#, B.CALL_STATUS
			, CASE WHEN A.CNT IS NULL AND B.CNT IS NULL THEN NULL ELSE IFNULL(A.CNT,0) + IFNULL(B.CNT,0) END AS CNT
			, CASE WHEN A.ERLANG IS NULL AND B.ERLANG IS NULL THEN NULL ELSE IFNULL(A.ERLANG,0) + IFNULL(B.ERLANG,0) END AS ERLANG
			, B.FREQUENCY,B.UARFCN,B.SITE_ID,B.CELL_LON,B.CELL_LAT,B.CLUSTER_ID,B.CELL_INDOOR 
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_erlang_fp_bs_dy_c_def a RIGHT JOIN 
		(
		 	SELECT
				DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				#, INDOOR AS INDOOR
				#, MOVING AS MOVING
				#, TILE_ID AS TILE_ID
				, CELL_ID AS CELL_ID
				, RNC_ID AS RNC_ID
				#, CALL_TYPE AS CALL_TYPE
				#, CALL_STATUS AS CALL_STATUS
				, SUM(CNT) AS CNT
				, SUM(ERLANG) AS ERLANG
				, FREQUENCY AS FREQUENCY
				, UARFCN AS UARFCN
				, SITE_ID AS SITE_ID
				, CELL_LON AS CELL_LON
				, CELL_LAT AS CELL_LAT
				, CLUSTER_ID AS CLUSTER_ID
				, CELL_INDOOR AS CELL_INDOOR
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS     
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE   
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO   
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99    
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA    
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB    
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS      
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_erlang_fp_bs_',WORKER_ID,'`
			GROUP BY 
				 DATA_DATE
				#, DATA_HOUR
				#, INDOOR
				#, MOVING
				#, TILE_ID
				, CELL_ID
				, RNC_ID
				#, CALL_TYPE
				#, CALL_STATUS
			ORDER BY NULL
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		#AND A.INDOOR=B.INDOOR
		#AND A.MOVING=B.MOVING
		#AND A.TILE_ID=B.TILE_ID
		AND A.CELL_ID=B.CELL_ID
		AND A.RNC_ID=B.RNC_ID
		#AND A.CALL_TYPE=B.CALL_TYPE
		#AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('DROP TEMPORARY TABLE  IF EXISTS ',GT_DB,RUN,'.tmp_table_tile_erlang_fp_bs_',WORKER_ID,';');
	PREPARE stmt FROM @sqlcmd;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_Erlang_FP_BS',CONCAT('Done: ',TIMESTAMPDIFF(SECOND,START_TIME,SYSDATE()),' seconds.'), NOW());
	
	
        SET SESSION max_heap_table_size = 1024*1024*128; 
        SET SESSION tmp_table_size = 1024*1024*128; 
        SET SESSION join_buffer_size = 1024*1024*128; 
        SET SESSION sort_buffer_size = 1024*1024*128; 
        SET SESSION read_buffer_size = 1024*1024*128; 
	
END$$
DELIMITER ;
