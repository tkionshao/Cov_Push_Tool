DELIMITER $$
USE `gt_gw_main`$$
DROP PROCEDURE IF EXISTS `SP_CreateDB_LTE`$$
CREATE DEFINER=`covmo`@`%` PROCEDURE `SP_Sub_Generate_FAILURE_CNT`(IN GT_DB VARCHAR(100), IN KIND VARCHAR(20), IN VENDOR_SOURCE VARCHAR(20))
BEGIN
	DECLARE RNC_ID INT;
	DECLARE O_GT_DB VARCHAR(100) DEFAULT GT_DB;
	DECLARE START_TIME DATETIME DEFAULT SYSDATE();
	DECLARE PARTITION_ID INT DEFAULT SUBSTRING(RIGHT(GT_DB,18),10,2) ;
	
	
	DECLARE STARTHOUR VARCHAR(2) DEFAULT SUBSTRING(RIGHT(GT_DB,18),10,2);
	DECLARE ENDHOUR VARCHAR(2) DEFAULT IF(SUBSTRING(RIGHT(GT_DB,18),15,2)='00','24',SUBSTRING(RIGHT(GT_DB,18),15,2));
	DECLARE SH_EH VARCHAR(9) DEFAULT RIGHT(GT_DB,9);
	DECLARE RUN VARCHAR(20);
	
	SELECT gt_strtok(GT_DB,2,'_') INTO RNC_ID;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_FAILURE_CNT','START', NOW());
	
	CALL SP_Sub_Set_Session_Param(GT_DB);
	SELECT REPLACE(GT_DB,SH_EH,'0000_0000') INTO GT_DB;
	
	IF VENDOR_SOURCE = 'GW' THEN
		IF KIND = 'DAILY' THEN
			SET RUN = '_tmp';
		ELSEIF KIND = 'RERUN' THEN
			SET RUN = '_rerun';
		END IF;
	ELSEIF VENDOR_SOURCE = 'AP' THEN
		SET RUN = '';
	END IF;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_failure_cnt TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;			
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_FAILURE_CNT','INSERT INTO table_failure_cnt', NOW());	
	
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,RUN,'.table_failure_cnt
					(DATA_DATE,DATA_HOUR,RNC_ID,PROTOCOL,FAIL_EVENT,FAIL_CAUSE,CNT)	
				SELECT  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC AS RNC_ID
					, 1 AS PROTOCOL 
					, RRC_FAILURE_EVENT_LAST AS FAIL_EVENT
					, RRC_FAILURE_CAUSE_LAST AS FAIL_CAUSE 
					, COUNT(POS_FIRST_RNC) AS CNT
				FROM ',GT_DB,RUN,'.table_call
				WHERE POS_FIRST_RNC =',RNC_ID,'
				AND DATA_HOUR >= ',STARTHOUR,' AND DATA_HOUR < ',ENDHOUR,'
				GROUP BY  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC
					, 1 
					, RRC_FAILURE_EVENT_LAST
					, RRC_FAILURE_CAUSE_LAST
				UNION 	
				SELECT  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC AS RNC_ID
					, 2 AS PROTOCOL 
					, RNSAP_FAILURE_EVNET_LAST AS FAIL_EVENT
					, RNSAP_FAILURE_CAUSE_LAST AS  FAIL_CAUSE 
					, COUNT(POS_FIRST_RNC) AS CNT
				FROM ',GT_DB,RUN,'.table_call
				WHERE POS_FIRST_RNC =',RNC_ID,'
				AND DATA_HOUR >= ',STARTHOUR,' AND DATA_HOUR < ',ENDHOUR,'
				GROUP BY  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC
					, 2 
					, RNSAP_FAILURE_EVNET_LAST
					, RNSAP_FAILURE_CAUSE_LAST
				UNION 	
				SELECT  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC AS RNC_ID
					, 3 AS PROTOCOL 
					, RANAP_FAILURE_EVENT_LAST AS FAIL_EVENT
					, RANAP_FAILURE_CAUSE_LAST AS FAIL_CAUSE 
					, COUNT(POS_FIRST_RNC) AS CNT
				FROM ',GT_DB,RUN,'.table_call
				WHERE POS_FIRST_RNC =',RNC_ID,'
				AND DATA_HOUR >= ',STARTHOUR,' AND DATA_HOUR < ',ENDHOUR,'
				GROUP BY  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC
					, 3 
					, RANAP_FAILURE_EVENT_LAST
					, RANAP_FAILURE_CAUSE_LAST	
				UNION 	
				SELECT  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC AS RNC_ID
					, 4 AS PROTOCOL 
					, NBAP_FAILURE_EVENT_LAST AS FAIL_EVENT
					, NBAP_FAILURE_CAUSE_LAST AS FAIL_CAUSE 
					, COUNT(POS_FIRST_RNC) AS CNT
				FROM ',GT_DB,RUN,'.table_call
				WHERE POS_FIRST_RNC =',RNC_ID,'
				AND DATA_HOUR >= ',STARTHOUR,' AND DATA_HOUR < ',ENDHOUR,'
				GROUP BY  DATA_DATE
					, DATA_HOUR
					, POS_FIRST_RNC
					, 4 
					, NBAP_FAILURE_EVENT_LAST
					, NBAP_FAILURE_CAUSE_LAST
				order by null
				;');
		PREPARE Stmt FROM @SqlCmd;
		EXECUTE Stmt;
		DEALLOCATE PREPARE Stmt;	
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_FAILURE_CNT',CONCAT('Done: ',TIMESTAMPDIFF(SECOND,START_TIME,SYSDATE()),' seconds.'), NOW());
		
END$$
DELIMITER ;
