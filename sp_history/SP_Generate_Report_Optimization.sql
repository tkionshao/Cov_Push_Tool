DELIMITER $$
USE `gt_gw_main`$$
DROP PROCEDURE IF EXISTS `SP_CreateDB_LTE`$$
CREATE DEFINER=`covmo`@`%` PROCEDURE `SP_Generate_Report_Optimization`(IN GT_DB VARCHAR(100),IN GT_COVMO VARCHAR(100))
BEGIN	
	DECLARE START_TIME DATETIME DEFAULT SYSDATE();
	DECLARE SH_EH VARCHAR(9) DEFAULT RIGHT(GT_DB,9);
	DECLARE CURRENT_NT_DB VARCHAR(50) DEFAULT CONCAT('gt_nt_',gt_strtok(GT_DB,3,'_'));
	DECLARE DEL VARCHAR(5);
	DECLARE RNC_ID INT DEFAULT gt_strtok(GT_DB,2,'_');
 	DECLARE DATA_DATE VARCHAR(8) DEFAULT gt_strtok(GT_DB,3,'_');
 	DECLARE FOLDER_PATH VARCHAR(50);
	DECLARE OPT_FLAG VARCHAR(10);
	DECLARE IMSI_IMEI_DIFF_FLAG VARCHAR(10);
	
	SELECT REPLACE(GT_DB,SH_EH,'0000_0000') INTO GT_DB;
	
	INSERT INTO gt_gw_main.SP_LOG VALUES(GT_DB,'SP_Generate_Report_Optimization','Start', START_TIME);
	SELECT LOWER(`value`) INTO IMSI_IMEI_DIFF_FLAG  FROM gt_gw_main.integration_param WHERE gt_group = 'sp' AND gt_name = 'imsi_imei_diff' ;
	
	CALL GT_GW_MAIN.SP_Sub_Generate_Overshooting_Severity(GT_DB,GT_COVMO);		
	CALL GT_GW_MAIN.Sp_Sub_Generate_ACO_Report(GT_DB);
	CALL GT_GW_MAIN.SP_Sub_Update_NBO_IRat(GT_DB,GT_COVMO);
 
	CALL gt_gw_Main.SP_Sub_Update_IMSI_CNT(GT_DB,'','AP','d');
	IF IMSI_IMEI_DIFF_FLAG = 'true' THEN 
		CALL gt_gw_main.`SP_Generate_IMSI_IMEI_Daily`(GT_DB,2);
	ELSE
		CALL gt_gw_main.SP_Generate_IMSI_PU_Daily(GT_DB,2);
	END IF;	
	CALL gt_gw_main.SP_Sub_Generate_Pre_NBO_Daily(GT_DB,'opt_nbr_relation','UMTS',
		'RNC_ID|CELL_ID,NBR_RNC_ID|NBR_CELL_ID',
		'HO_CNT|MS_MEAS_CNT|MS_RSCP_SUM|MS_ECN0_SUM|BEST_EVENT_CNT|SHO_ATTEMPT|SHO_FAILURE|SOHO_ATTEMPT|SOHO_FAILURE|IFHO_ATTEMPT|IFHO_FAILURE|MEAS_RSCP_GAP_CNT|MEAS_RSCP_GAP_SUM',
		'DATA_DATE|DATA_HOUR|CELL_NAME|CELL_UARFCN|SITE_ID|FREQUENCY|NBR_CELL_NAME|NBR_UARFCN|NBR_SITE_ID|NBR_FREQUENCY|NBR_PSC|NBR_DISTANCE|NBR_ANGLE|NBR_TYPE|PRIORITY|BATCH');
	CALL gt_gw_main.SP_Sub_Generate_Pre_NBO_Daily(GT_DB,'opt_nbr_relation_irat2g','UMTS',
		'RNC_ID|CELL_ID|NBR_BSC_ID|NBR_CELL_ID',
		'HO_CNT|MS_MEAS_CNT|MS_RSSI_SUM',
		'DATA_DATE|DATA_HOUR|CELL_NAME|CELL_UARFCN|SITE_ID|FREQUENCY|NBR_LAC|NBR_SITE_ID|NBR_CELL_NAME|NBR_ARFCN|NBR_BSIC|NBR_DISTANCE|NBR_ANGLE|NBR_TYPE|PRIORITY|BATCH');
	SET @SqlCmd=CONCAT('DROP TABLE IF EXISTS ',GT_DB,'.tmp_avg_voronoi_distance;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SELECT LOWER(`value`) INTO OPT_FLAG FROM gt_gw_main.integration_param WHERE gt_group = 'sp' AND gt_name = 'rpt_opt_export' ;
	
	IF OPT_FLAG = 'TRUE' THEN 	
		
		SET FOLDER_PATH=CONCAT('//data//Mysql_Export//',DATA_DATE,'//');
		SET @SqlCmd=CONCAT('SELECT ''DATA_DATE'' AS DATA_DATE,''CELL_ID'' AS CELL_ID,''TOTAL_MEASURED_CNT'' AS TOTAL_MEASURED_CNT,''BAD_SIGNAL_MEASURED_CNT'' AS BAD_SIGNAL_MEASURED_CNT,''BAD_SIGNAL_RATIO'' AS BAD_SIGNAL_RATIO
		UNION
		SELECT DATA_DATE,RNC_ID, CELL_ID, 
		SUM(MMR_CNT_LOWER_300METER) AS TOTAL_MEASURED_CNT, 
		SUM(MMR_CNT_LOWER_90DBM) AS BAD_SIGNAL_MEASURED_CNT , 
		SUM(MMR_CNT_LOWER_90DBM)/SUM(MMR_CNT_LOWER_300METER) AS BAD_SIGNAL_RATIO 
		FROM ',GT_DB,'.table_tile_fp_dy_c_def
		GROUP BY DATA_DATE,RNC_ID, CELL_ID
		HAVING SUM(MMR_CNT_LOWER_300METER)>0
		INTO OUTFILE ''',FOLDER_PATH,'RF_ANALYSIS_IN_300METER_',RNC_ID,'.csv''
		FIELDS TERMINATED BY ''\t''
		OPTIONALLY ENCLOSED BY ''''
		LINES TERMINATED BY ''\n''
		;');
		PREPARE Stmt FROM @SqlCmd;
		EXECUTE Stmt;
		DEALLOCATE PREPARE Stmt;
	
	END IF;
	
	INSERT INTO gt_gw_main.SP_LOG VALUES(GT_DB,'SP_Generate_Report_Optimization',CONCAT('Done: ',TIMESTAMPDIFF(SECOND,START_TIME,SYSDATE()),' seconds.'), NOW());		
END$$
DELIMITER ;
