CREATE DEFINER=`covmo`@`%` PROCEDURE `SP_Sub_Generate_Overshooting_Severity_GSM`(IN GT_DB VARCHAR(100),IN GT_COVMO VARCHAR(10))
BEGIN
 	DECLARE O_GT_DB VARCHAR(100) DEFAULT GT_DB;
	DECLARE START_TIME DATETIME DEFAULT SYSDATE();
	DECLARE STEP_START_TIME DATETIME DEFAULT SYSDATE();
	DECLARE CURRENT_NT_DB VARCHAR(50) DEFAULT CONCAT('gt_nt_',gt_strtok(GT_DB,3,'_'));
	DECLARE WORKER_ID VARCHAR(10) DEFAULT CONNECTION_ID();
	DECLARE OVERSHOOT_COL_STR VARCHAR(1500) DEFAULT 
		'T1_CALL_CNT,
		T0_CALL_CNT,
		OVER_DISTANCE_SUM,
		OVER_DISTANCE_MAX,
		T0_TILE_CNT,
		T1_TILE_CNT
		';
	DECLARE OVERSHOOT_COL_FORMULA_STR VARCHAR(5000) DEFAULT 
		'SUM(OVER_LOC_CALL_CNT) AS T1_CALL_CNT,
		SUM(NONOVER_LOC_CALL_CNT) AS T0_CALL_CNT,
		SUM(OVER_DISTANCE_SUM) AS OVER_DISTANCE_SUM,
		MAX(OVER_DISTANCE_MAX) AS OVER_DISTANCE_MAX,
		SUM(CASE WHEN TILE_OVER_FLAG is NOT NULL THEN 1 ELSE 0 END)  AS T0_TILE_CNT,
		SUM(TILE_OVER_FLAG)	AS T1_TILE_CNT
		';
	
	DECLARE OVERSHOOT_EVENT_COL_STR VARCHAR(1500) DEFAULT 
		'SERVING_T1_EVENT_CNT,
		SERVING_T0_EVENT_CNT,
		SERVING_T1_TILE_CNT,
		SERVING_T0_TILE_CNT,
		SERVING_OVER_DISTANCE_MAX,
		SERVING_OVER_DISTANCE_AVG,
		BEST_T1_EVENT_CNT,
		BEST_T0_EVENT_CNT,
		BEST_T1_TILE_CNT,
		BEST_T0_TILE_CNT,
		BEST_OVER_DISTANCE_MAX,
		BEST_OVER_DISTANCE_AVG,
		SERVING_MAINBEAM_T1_EVENT_CNT,
		SERVING_MAINBEAM_T0_EVENT_CNT,
		SERVING_MAINBEAM_OVER_DISTANCE_MAX,
		SERVING_MAINBEAM_OVER_DISTANCE_AVG,
		BEST_MAINBEAM_T1_EVENT_CNT,
		BEST_MAINBEAM_T0_EVENT_CNT,
		BEST_MAINBEAM_OVER_DISTANCE_MAX,
		BEST_MAINBEAM_OVER_DISTANCE_AVG
		';
		
	SET @SqlCmd=CONCAT('SELECT att_value INTO @SYS_CONFIG_TILE FROM ',CURRENT_NT_DB,'.`sys_config`
						WHERE group_name=''system'' AND att_name=''MapResolution'';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;	
	
	IF gt_covmo_csv_count(@SYS_CONFIG_TILE,',') =3 THEN	
		SET @ZOOM_LEVEL = gt_covmo_csv_get(@SYS_CONFIG_TILE,3);		
	ELSE
		SET @ZOOM_LEVEL = 19;
	END IF;	
	-- Call case 
	INSERT INTO gt_gw_main.SP_LOG VALUES(O_GT_DB,'SP_Sub_Generate_Overshooting_Severity_GSM','Call base Start', START_TIME);
	SET STEP_START_TIME := SYSDATE();
	
	SET @SqlCmd=CONCAT('TRUNCATE TABLE  ',GT_DB,'.`table_overshooting_severity_gsm_d1`');	
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	SET @SQLCMD =CONCAT('DROP TEMPORARY TABLE IF EXISTS ',GT_DB,'.tmp_overshooting_severity_gsm;');
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT;
	
	SET @SqlCmd=CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS ',GT_DB,'.`tmp_overshooting_severity_gsm` LIKE ',GT_DB,'.`table_overshooting_severity_gsm_d1`;'); 
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;	
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,'.tmp_overshooting_severity_gsm(
						DATA_DATE,
						LAC,
						BSC_ID,
						CLUSTER_ID,
						SITE_ID,
						CELL_ID,
						FREQUENCY,
						ARFCN,
						CELL_NAME,
						 ',OVERSHOOT_COL_STR,')	
				SELECT 
					DATA_DATE,
					LAC,
					BSC_ID,
					CLUSTER_ID,
					SITE_ID,
					CELL_ID,
					FREQUENCY,
					ARFCN,
					CELL_NAME,
					',OVERSHOOT_COL_FORMULA_STR,'
					FROM ',GT_DB,'.table_tile_start_gsm_dy_def
					GROUP BY DATA_DATE,
						LAC,
						BSC_ID,
						CLUSTER_ID,
						SITE_ID,
						CELL_ID,
						FREQUENCY,
						ARFCN
					ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt; 
	SET @SqlCmd=CONCAT('UPDATE ',GT_DB,'.`tmp_overshooting_severity_gsm` A, ',CURRENT_NT_DB,'.`nt2_antenna_gsm` B
				SET 
					A.ANTENNA_RADIUS = B.ANTENNA_RADIUS,
					A.CLOSED_RADIUS  = B.CLOSED_RADIUS
				WHERE A.CELL_ID = B.CELL_ID AND A.BSC_ID = B.BSC_ID AND A.LAC=B.LAC ;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,'.table_overshooting_severity_gsm_d1
				(				  
					DATA_DATE,
					LAC,
					BSC_ID,
					CLUSTER_ID,
					SITE_ID,
					CELL_ID,
					FREQUENCY,
					ARFCN,
					CELL_NAME,
					ANTENNA_RADIUS,
					CLOSED_RADIUS,
				  ',OVERSHOOT_COL_STR,')	
			SELECT 
					DATA_DATE,
					LAC,
					BSC_ID,
					CLUSTER_ID,
					SITE_ID,
					CELL_ID,
					FREQUENCY,
					ARFCN,
					CELL_NAME,
					ANTENNA_RADIUS,
					CLOSED_RADIUS,
				  ',OVERSHOOT_COL_STR,'
				FROM ',GT_DB,'.tmp_overshooting_severity_gsm;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;					
	INSERT INTO gt_gw_main.SP_LOG VALUES(O_GT_DB,'SP_Sub_Generate_Overshooting_Severity_GSM',CONCAT('call base Done cost: ',TIMESTAMPDIFF(SECOND,STEP_START_TIME,SYSDATE()),' sec.'), NOW());
	-- Event case 
	INSERT INTO gt_gw_main.SP_LOG VALUES(O_GT_DB,'SP_Sub_Generate_Overshooting_Severity_GSM','Event base Start', SYSDATE());
	SET STEP_START_TIME := SYSDATE();
	
	SET @SqlCmd=CONCAT('TRUNCATE TABLE  ',GT_DB,'.`table_overshooting_severity_event_gsm_d1`');	
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	SET @SQLCMD =CONCAT('DROP TEMPORARY TABLE IF EXISTS ',GT_DB,'.tmp_overshooting_severity_event_gsm;');
	PREPARE STMT FROM @SQLCMD;
	EXECUTE STMT;
	DEALLOCATE PREPARE STMT; 
	
	SET @SqlCmd=CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS ',GT_DB,'.`tmp_overshooting_severity_event_gsm` LIKE ',GT_DB,'.`table_overshooting_severity_event_gsm_d1`;'); 
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;	
	
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,'.tmp_overshooting_severity_event_gsm
				(
					DATA_DATE,
					LAC,
					BSC_ID,
					CLUSTER_ID,
					SITE_ID,
					CELL_ID,
					FREQUENCY,
					ARFCN,
					CELL_NAME,
					ANTENNA_RADIUS,
					CLOSED_RADIUS,
				 ',OVERSHOOT_EVENT_COL_STR,')	
				SELECT 
					A.DATA_DATE,
					A.LAC,
					A.BSC_ID,
					A.CLUSTER_ID,
					A.SITE_ID,
					A.CELL_ID,
					A.FREQUENCY,
					A.ARFCN,
					A.CELL_NAME,					
					B.ANTENNA_RADIUS,
					B.CLOSED_RADIUS,
					SUM(SERVING_T1_EVENT_CNT) AS `SERVING_T1_EVENT_CNT`,
					SUM(SERVING_T0_EVENT_CNT) AS `SERVING_T0_EVENT_CNT`,
					SUM(CASE WHEN SERVING_T1_EVENT_CNT >0 THEN 1 ELSE 0 END) AS `SERVING_T1_TILE_CNT`,
					SUM(CASE WHEN SERVING_T0_EVENT_CNT>0 AND SERVING_T1_EVENT_CNT=0 THEN 1 ELSE 0 END) AS `SERVING_T0_TILE_CNT`,
					MAX( CASE WHEN SERVING_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE)
					ELSE NULL END) AS SERVING_OVER_DISTANCE_MAX,
					SUM( CASE WHEN SERVING_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE) 
					ELSE NULL END)/SUM(CASE WHEN SERVING_T1_EVENT_CNT>0 THEN 1 ELSE NULL END) AS SERVING_OVER_DISTANCE_AVG,
					SUM(BEST_T1_EVENT_CNT) AS `BEST_T1_EVENT_CNT`,
					SUM(BEST_T0_EVENT_CNT) AS `BEST_T0_EVENT_CNT`,
					SUM(CASE WHEN BEST_T1_EVENT_CNT>0 THEN 1 ELSE 0 END) AS `BEST_T1_TILE_CNT`,
					SUM(CASE WHEN BEST_T0_EVENT_CNT>0 AND BEST_T1_EVENT_CNT=0 THEN 1 ELSE 0 END) AS `BEST_T0_TILE_CNT`,
					MAX( CASE WHEN BEST_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE)
					ELSE NULL END) AS BEST_OVER_DISTANCE_MAX,
					SUM( CASE WHEN BEST_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE) 
					ELSE NULL END)/SUM(CASE WHEN BEST_T1_EVENT_CNT>0 THEN 1 ELSE NULL END) AS BEST_OVER_DISTANCE_AVG,
					SUM(SERVING_MAINBEAM_T1_EVENT_CNT) AS SERVING_MAINBEAM_T1_EVENT_CNT,
					SUM(SERVING_MAINBEAM_T0_EVENT_CNT) AS SERVING_MAINBEAM_T0_EVENT_CNT,	
					MAX( CASE WHEN SERVING_MAINBEAM_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE) 
					ELSE NULL END) AS SERVING_MAINBEAM_OVER_DISTANCE_MAX,
					SUM(CASE WHEN SERVING_MAINBEAM_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE) 
					ELSE NULL END) /SUM( CASE WHEN SERVING_MAINBEAM_T1_EVENT_CNT>0 THEN 1 ELSE NULL END) AS SERVING_MAINBEAM_OVER_DISTANCE_AVG,
					SUM(BEST_MAINBEAM_T1_EVENT_CNT) AS BEST_MAINBEAM_T1_EVENT_CNT,
					SUM(BEST_MAINBEAM_T0_EVENT_CNT) AS BEST_MAINBEAM_T0_EVENT_CNT,	
					MAX( CASE WHEN BEST_MAINBEAM_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE) 
					ELSE NULL END) AS BEST_MAINBEAM_OVER_DISTANCE_MAX,
					SUM(CASE WHEN BEST_MAINBEAM_T1_EVENT_CNT>0 THEN gt_covmo_distance(gt_covmo_proj_hex_geohash_to_lng(TILE_ID, ',@ZOOM_LEVEL,') ,gt_covmo_proj_hex_geohash_to_lat(TILE_ID, ',@ZOOM_LEVEL,'), b.LONGITUDE,b.LATITUDE) 
					ELSE NULL END) /SUM( CASE WHEN BEST_MAINBEAM_T1_EVENT_CNT>0 THEN 1 ELSE NULL END) AS BEST_MAINBEAM_OVER_DISTANCE_AVG 
				FROM ',GT_DB,'.table_tile_fp_gsm_dy_def A JOIN ',CURRENT_NT_DB,'.`nt2_antenna_gsm` B
				ON A.BSC_ID=B.BSC_ID AND A.CELL_ID=B.CELL_ID AND A.LAC=B.LAC
				GROUP BY A.DATA_DATE,
					A.LAC,
					A.BSC_ID,
					A.CLUSTER_ID,
					A.SITE_ID,
					A.CELL_ID,
					A.FREQUENCY,
					A.ARFCN
				ORDER BY NULL;');
			PREPARE Stmt FROM @SqlCmd;
			EXECUTE Stmt;
			DEALLOCATE PREPARE Stmt;
			
-- 	SET @SqlCmd=CONCAT('UPDATE ',GT_DB,'.`tmp_overshooting_severity_event_gsm` A, ',CURRENT_NT_DB,'.`nt2_antenna_gsm` B
-- 				SET 
-- 					A.ANTENNA_RADIUS = B.ANTENNA_RADIUS,
-- 					A.CLOSED_RADIUS  = B.CLOSED_RADIUS
-- 				WHERE A.CELL_ID = B.CELL_ID AND A.BSC_ID = B.BSC_ID AND A.LAC=B.LAC ;');
-- 	PREPARE Stmt FROM @SqlCmd;
-- 	EXECUTE Stmt;
-- 	DEALLOCATE PREPARE Stmt;
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,'.table_overshooting_severity_event_gsm_d1
				(
					DATA_DATE,
					LAC,
					BSC_ID,
					CLUSTER_ID,
					SITE_ID,
					CELL_ID,
					FREQUENCY,
					ARFCN,
					CELL_NAME,
					ANTENNA_RADIUS,
					CLOSED_RADIUS,
					',OVERSHOOT_EVENT_COL_STR,'
				)	
				SELECT 
					DATA_DATE,
					LAC,
					BSC_ID,
					CLUSTER_ID,
					SITE_ID,
					CELL_ID,
					FREQUENCY,
					ARFCN,
					CELL_NAME,
					ANTENNA_RADIUS,
					CLOSED_RADIUS,
					',OVERSHOOT_EVENT_COL_STR,'
				FROM ',GT_DB,'.tmp_overshooting_severity_event_gsm;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	INSERT INTO gt_gw_main.SP_LOG VALUES(O_GT_DB,'SP_Sub_Generate_Overshooting_Severity_GSM',CONCAT('Event base Done: ',TIMESTAMPDIFF(SECOND,STEP_START_TIME,SYSDATE()),' seconds.'), NOW());	
		
END
utf8
utf8_general_ci
latin1_swedish_ci
