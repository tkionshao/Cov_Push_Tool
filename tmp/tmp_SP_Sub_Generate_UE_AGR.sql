CREATE DEFINER=`covmo`@`%` PROCEDURE `SP_Sub_Generate_UE_AGR`(IN GT_DB VARCHAR(100), IN KIND VARCHAR(20), IN VENDOR_SOURCE VARCHAR(20),IN GT_COVMO VARCHAR(100))
BEGIN
	DECLARE RNC_ID INT;
	DECLARE O_GT_DB VARCHAR(100) DEFAULT GT_DB;
	DECLARE START_TIME DATETIME DEFAULT SYSDATE();
	DECLARE PARTITION_ID INT DEFAULT SUBSTRING(RIGHT(GT_DB,18),10,2) ;
	DECLARE STARTHOUR VARCHAR(2) DEFAULT SUBSTRING(RIGHT(GT_DB,18),10,2);
	DECLARE ENDHOUR VARCHAR(2) DEFAULT IF(SUBSTRING(RIGHT(GT_DB,18),15,2)='00','24',SUBSTRING(RIGHT(GT_DB,18),15,2));
	DECLARE SH_EH VARCHAR(9) DEFAULT RIGHT(GT_DB,9);
	DECLARE RUN VARCHAR(20);
	DECLARE WORKER_ID VARCHAR(10) DEFAULT CONNECTION_ID();
	DECLARE CURRENT_NT_DB VARCHAR(50) DEFAULT CONCAT('gt_nt_',gt_strtok(GT_DB,3,'_'));
	SELECT gt_strtok(GT_DB,2,'_') INTO RNC_ID;
	
	CALL SP_Sub_Set_Session_Param(GT_DB);
	SELECT REPLACE(GT_DB,SH_EH,'0000_0000') INTO GT_DB;
	
	IF VENDOR_SOURCE = 'GW' THEN
		IF KIND = 'DAILY' THEN
			SET RUN = '_tmp';
		ELSEIF KIND = 'RERUN' THEN
			SET RUN = '_rerun';
		END IF;
	ELSEIF VENDOR_SOURCE = 'AP' THEN
		SET RUN = '';
	END IF;
 	SET @SqlCmd=CONCAT('SELECT att_value INTO @ZOOM_LEVEL FROM ',GT_DB,RUN,'.`sys_config` WHERE `group_name`=''system'' AND att_name = ''MapResolution'';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_ue TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_ue_t TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_ue_c TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_ue_def TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_ue_t_def TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('ALTER TABLE ',GT_DB,RUN,'.table_tile_ue_c_def TRUNCATE PARTITION h',PARTITION_ID,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_UE_AGR','CREATE temp TABLE tmp_table_tile_ue ', NOW());
	
	SET @SqlCmd=CONCAT('DROP TEMPORARY TABLE  IF EXISTS ',GT_DB,RUN,'.tmp_table_tile_ue_',WORKER_ID,';');
	PREPARE stmt FROM @sqlcmd;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	SET @SqlCmd=CONCAT('CREATE TEMPORARY TABLE ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'` (
					`DATA_DATE` DATE DEFAULT NULL,
					`DATA_HOUR` TINYINT(4) DEFAULT NULL,
					`INDOOR` TINYINT(4) DEFAULT NULL,
					`MOVING` TINYINT(4) DEFAULT NULL,
					`TILE_ID` BIGINT(20) DEFAULT NULL,
					`RNC_ID` MEDIUMINT(9) DEFAULT NULL,
					`CELL_INDOOR` TINYINT(4) DEFAULT NULL,
					`CLUSTER_ID` MEDIUMINT(9) DEFAULT NULL,
					`SITE_ID` VARCHAR(20) DEFAULT NULL,
					`FREQUENCY` SMALLINT(6) DEFAULT NULL,
					`UARFCN` MEDIUMINT(9) DEFAULT NULL,
					`CELL_ID` MEDIUMINT(9) DEFAULT NULL,
					`CALL_TYPE` TINYINT(4) DEFAULT NULL,
					`CALL_STATUS` TINYINT(4) DEFAULT NULL,
					`UE_CNT` SMALLINT(6) DEFAULT ''0'',
					-- CALC FOR TILE AND CELL
					-- update
					`CELL_LON` DOUBLE DEFAULT NULL,
					`CELL_LAT` DOUBLE DEFAULT NULL
-- 	,
-- 					  CALL_STATUS_BLOCK MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_STATUS_SUCCESS MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_STATUS_DROP MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_SMS MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_VOICE MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_VEDIO MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_PS99 MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_HSPA MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_MRAB MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_PSOTHERS MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_CS MEDIUMINT(9) DEFAULT 0,
-- 					  CALL_TYPE_PS MEDIUMINT(9) DEFAULT 0
				) ENGINE=MYISAM DEFAULT CHARSET=latin1;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt; 
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_UE_AGR','INSERT tmp_table_tile_ue FROM table_call', NOW());
	
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
			    (DATA_DATE,DATA_HOUR,INDOOR,MOVING,TILE_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,FREQUENCY,UARFCN,CELL_ID,CALL_TYPE,CALL_STATUS,UE_CNT
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)	
			    SELECT
					 DATA_DATE
					, DATA_HOUR
					, INDOOR
					, MOVING
					, gt_covmo_proj_geohash_to_hex_geohash(POS_UE_LOC, ',@ZOOM_LEVEL,') AS TILE_ID
					, POS_UE_RNC AS RNC_ID
					, POS_UE_CELL_INDOOR AS CELL_INDOOR
					, POS_UE_CLUSTER AS CLUSTER_ID
					, POS_UE_SITE AS SITE_ID
					, POS_UE_FREQUENCY 
					, POS_UE_UARFCN
					, POS_UE_CELL AS CELL_ID
					, CALL_TYPE 
					, CALL_STATUS
					, COUNT(POS_UE_CELL) AS UE_CNT
-- 					, SUM(IF(CALL_STATUS = 3,1,0)) AS CALL_STATUS_BLOCK
-- 					, SUM(IF(CALL_STATUS IN (1,2,4),1,0)) AS CALL_STATUS_SUCCESS
-- 					, SUM(IF(CALL_STATUS = 2,1,0)) AS CALL_STATUS_DROP
-- 					, SUM(IF(CALL_TYPE = 16,1,0)) AS CALL_TYPE_SMS
-- 					, SUM(IF(CALL_TYPE = 10,1,0)) AS CALL_TYPE_VOICE
-- 					, SUM(IF(CALL_TYPE = 11,1,0)) AS CALL_TYPE_VEDIO
-- 					, SUM(IF(CALL_TYPE = 12,1,0)) AS CALL_TYPE_PS99
-- 					, SUM(IF(CALL_TYPE = 13,1,0)) AS CALL_TYPE_HSPA
-- 					, SUM(IF(CALL_TYPE = 14,1,0)) AS CALL_TYPE_MRAB
-- 					, SUM(IF(CALL_TYPE = 18,1,0)) AS CALL_TYPE_PSOTHERS
-- 					, SUM(IF(CALL_TYPE IN (10,11),1,0)) AS CALL_TYPE_CS
-- 					, SUM(IF(CALL_TYPE IN (12,13,14,18),1,0)) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.table_call
				WHERE POS_UE_RNC =',RNC_ID,'
				AND DATA_HOUR >= ',STARTHOUR,' AND DATA_HOUR < ',ENDHOUR,'
				GROUP BY  DATA_DATE 
					, DATA_HOUR 
					, gt_covmo_proj_geohash_to_hex_geohash(POS_UE_LOC, ',@ZOOM_LEVEL,')
					, POS_UE_RNC
-- 					, POS_UE_CELL_INDOOR
					, POS_UE_CELL
-- 					, POS_UE_CLUSTER
-- 					, POS_UE_SITE
-- 					, POS_UE_FREQUENCY 
-- 					, POS_UE_UARFCN
					, CALL_TYPE
					, INDOOR
					, MOVING
					, CALL_STATUS
				ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_UE_AGR','UPDATE CELL_LON, CELL_LAT IN table_tile_ue', NOW());
	
	SET @SqlCmd=CONCAT(' UPDATE ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'` A, 
				    ',CURRENT_NT_DB,'.nt_current B
			     SET A.CELL_LON=B.LONGITUDE
				,A.CELL_LAT=B.LATITUDE
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,';');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;	
		
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO  ',GT_DB,RUN,'.`table_tile_ue`	
					(DATA_DATE,DATA_HOUR,INDOOR,MOVING,TILE_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,FREQUENCY,UARFCN,CELL_ID,CALL_TYPE,CALL_STATUS,UE_CNT
					, CELL_LON,CELL_LAT
-- 					,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 					,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
				SELECT
					DATA_DATE,DATA_HOUR,INDOOR,MOVING,TILE_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,FREQUENCY,UARFCN,CELL_ID,CALL_TYPE,CALL_STATUS,UE_CNT
					, CELL_LON,CELL_LAT
-- 					,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 					,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_t', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,RUN,'.table_tile_ue_t
			    (DATA_DATE,DATA_HOUR,INDOOR,MOVING,TILE_ID,RNC_ID,FREQUENCY,UARFCN,CALL_TYPE,CALL_STATUS,UE_CNT
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)	
			    SELECT
					 DATA_DATE
					, DATA_HOUR
					, INDOOR
					, MOVING
					, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					#, CLUSTER_ID
					#, SITE_ID
					, FREQUENCY 
					, UARFCN
					#, CELL_ID
					, CALL_TYPE 
					, CALL_STATUS
					, SUM(UE_CNT) AS UE_CNT
-- 					,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 					,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 					,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 					,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 					,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 					,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 					,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 					,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 					,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 					,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 					,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 					,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
				GROUP BY  DATA_DATE 
					, DATA_HOUR 
					, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					#, CELL_ID
					#, CLUSTER_ID
					#, SITE_ID
-- 					, FREQUENCY 
-- 					, UARFCN
					, CALL_TYPE
					, INDOOR
					, MOVING
					, CALL_STATUS
				ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_c', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,RUN,'.table_tile_ue_c
			    (DATA_DATE,DATA_HOUR,INDOOR,MOVING,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,FREQUENCY,UARFCN,CELL_ID,CALL_TYPE,CALL_STATUS,UE_CNT
				, CELL_LON,CELL_LAT
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)	
			    SELECT
					 DATA_DATE
					, DATA_HOUR
					, INDOOR
					, MOVING
					#, TILE_ID
					, RNC_ID
					, CELL_INDOOR
					, CLUSTER_ID
					, SITE_ID
					, FREQUENCY 
					, UARFCN
					, CELL_ID
					, CALL_TYPE 
					, CALL_STATUS
					, SUM(UE_CNT) AS UE_CNT
					, CELL_LON,CELL_LAT
-- 					,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 					,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 					,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 					,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 					,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 					,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 					,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 					,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 					,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 					,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 					,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 					,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
				GROUP BY  DATA_DATE 
					, DATA_HOUR 
					#, TILE_ID
					, RNC_ID
-- 					, CELL_INDOOR
					, CELL_ID
-- 					, CLUSTER_ID
-- 					, SITE_ID
-- 					, FREQUENCY 
-- 					, UARFCN
					, CALL_TYPE
					, INDOOR
					, MOVING
					, CALL_STATUS
				ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_def', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,RUN,'.table_tile_ue_def
			    (DATA_DATE,DATA_HOUR,TILE_ID,RNC_ID,CELL_ID,UE_CNT
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)	
			    SELECT
					 DATA_DATE
					, DATA_HOUR
					#, INDOOR
					#, MOVING
					, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					#, CLUSTER_ID
					#, SITE_ID
					#, FREQUENCY 
					#, UARFCN
					, CELL_ID
					#, CALL_TYPE 
					#, CALL_STATUS
					, SUM(UE_CNT) AS UE_CNT
					#, CELL_LON,CELL_LAT
-- 					,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 					,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 					,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 					,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 					,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 					,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 					,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 					,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 					,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 					,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 					,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 					,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
				GROUP BY  DATA_DATE 
					, DATA_HOUR 
					, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					, CELL_ID
					#, CLUSTER_ID
					#, SITE_ID
					#, FREQUENCY 
					#, UARFCN
					#, CALL_TYPE
					#, INDOOR
					#, MOVING
					#, CALL_STATUS
				ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_t_def', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,RUN,'.table_tile_ue_t_def
			    (DATA_DATE,DATA_HOUR,TILE_ID,RNC_ID,UE_CNT
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)	
			    SELECT
					 DATA_DATE
					, DATA_HOUR
					#, INDOOR
					#, MOVING
					, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					#, CLUSTER_ID
					#, SITE_ID
					#, FREQUENCY 
					#, UARFCN
					#, CELL_ID
					#, CALL_TYPE 
					#, CALL_STATUS
					, SUM(UE_CNT) AS UE_CNT
					#, CELL_LON,CELL_LAT
-- 					,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 					,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 					,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 					,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 					,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 					,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 					,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 					,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 					,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 					,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 					,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 					,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
				GROUP BY  DATA_DATE 
					, DATA_HOUR 
					, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					#, CELL_ID
					#, CLUSTER_ID
					#, SITE_ID
					#, FREQUENCY 
					#, UARFCN
					#, CALL_TYPE
					#, INDOOR
					#, MOVING
					#, CALL_STATUS
				ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_c_def', NOW());
	SET @SqlCmd=CONCAT('INSERT INTO ',GT_DB,RUN,'.table_tile_ue_c_def
			    (DATA_DATE,DATA_HOUR,RNC_ID,CELL_ID,UE_CNT
-- 				,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 				,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)	
			    SELECT
					 DATA_DATE
					, DATA_HOUR
					#, INDOOR
					#, MOVING
					#, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					#, CLUSTER_ID
					#, SITE_ID
					#, FREQUENCY 
					#, UARFCN
					, CELL_ID
					#, CALL_TYPE 
					#, CALL_STATUS
					, SUM(UE_CNT) AS UE_CNT
					#, CELL_LON,CELL_LAT
-- 					,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 					,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 					,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 					,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 					,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 					,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 					,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 					,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 					,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 					,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 					,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 					,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
				FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
				GROUP BY  DATA_DATE 
					, DATA_HOUR 
					#, TILE_ID
					, RNC_ID
					#, CELL_INDOOR
					, CELL_ID
					#, CLUSTER_ID
					#, SITE_ID
					#, FREQUENCY 
					#, UARFCN
					#, CALL_TYPE
					#, INDOOR
					#, MOVING
					#, CALL_STATUS
				ORDER BY NULL;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_dy', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_ue_dy
 		(DATA_DATE,INDOOR,MOVING,TILE_ID,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,FREQUENCY,UARFCN,CELL_ID,CALL_TYPE,CALL_STATUS,UE_CNT
		,CELL_LON,CELL_LAT
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			 B.DATA_DATE
			#, DATA_HOUR
			, B.INDOOR
			, B.MOVING
			, B.TILE_ID
			, B.RNC_ID
			, B.CELL_INDOOR
			, B.CLUSTER_ID
			, B.SITE_ID
			, B.FREQUENCY 
			, B.UARFCN
			, B.CELL_ID
			, B.CALL_TYPE 
			, B.CALL_STATUS
			, CASE WHEN A.UE_CNT IS NULL AND B.UE_CNT IS NULL THEN NULL ELSE IFNULL(A.UE_CNT,0) + IFNULL(B.UE_CNT,0) END AS UE_CNT
			, B.CELL_LON,B.CELL_LAT
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_ue_dy a RIGHT JOIN 
		(
		 	SELECT
				 DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				, INDOOR AS INDOOR
				, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				, RNC_ID AS RNC_ID
				, CELL_INDOOR AS CELL_INDOOR
				, CLUSTER_ID AS CLUSTER_ID
				, SITE_ID AS SITE_ID
				, FREQUENCY  AS FREQUENCY
				, UARFCN AS UARFCN
				, CELL_ID AS CELL_ID
				, CALL_TYPE  AS CALL_TYPE
				, CALL_STATUS AS CALL_STATUS
				, SUM(UE_CNT) AS UE_CNT
				, CELL_LON AS CELL_LON,CELL_LAT AS CELL_LAT
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
			GROUP BY 
				DATA_DATE 
				#, DATA_HOUR 
				, TILE_ID
				, RNC_ID
-- 				, CELL_INDOOR
				, CELL_ID
-- 				, CLUSTER_ID
-- 				, SITE_ID
-- 				, FREQUENCY 
-- 				, UARFCN
				, CALL_TYPE
				, INDOOR
				, MOVING
				, CALL_STATUS
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		AND A.TILE_ID=B.TILE_ID
		AND A.RNC_ID=B.RNC_ID
-- 		AND A.CELL_INDOOR=B.CELL_INDOOR
		AND A.CELL_ID=B.CELL_ID
-- 		AND A.CLUSTER_ID=B.CLUSTER_ID
-- 		AND A.SITE_ID=B.SITE_ID
-- 		AND A.FREQUENCY=B.FREQUENCY
-- 		AND A.UARFCN=B.UARFCN
		AND A.CALL_TYPE=B.CALL_TYPE
		AND A.INDOOR=B.INDOOR
		AND A.MOVING=B.MOVING
		AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_dy_t', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_ue_dy_t
 		(DATA_DATE,INDOOR,MOVING,TILE_ID,RNC_ID,FREQUENCY,UARFCN,CALL_TYPE,CALL_STATUS,UE_CNT
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			 B.DATA_DATE
			#, DATA_HOUR
			, B.INDOOR
			, B.MOVING
			, B.TILE_ID
			, B.RNC_ID
			#, B.CELL_INDOOR
			#, B.CLUSTER_ID
			#, B.SITE_ID
			, B.FREQUENCY 
			, B.UARFCN
			#, B.CELL_ID
			, B.CALL_TYPE 
			, B.CALL_STATUS
			, CASE WHEN A.UE_CNT IS NULL AND B.UE_CNT IS NULL THEN NULL ELSE IFNULL(A.UE_CNT,0) + IFNULL(B.UE_CNT,0) END AS UE_CNT
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_ue_dy_t a RIGHT JOIN 
		(
		 	SELECT
				 DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				, INDOOR AS INDOOR
				, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				, RNC_ID AS RNC_ID
				#, CELL_INDOOR AS CELL_INDOOR
				#, CLUSTER_ID AS CLUSTER_ID
				#, SITE_ID AS SITE_ID
				, FREQUENCY  AS FREQUENCY
				, UARFCN AS UARFCN
				#, CELL_ID AS CELL_ID
				, CALL_TYPE  AS CALL_TYPE
				, CALL_STATUS AS CALL_STATUS
				, SUM(UE_CNT) AS UE_CNT
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
			GROUP BY 
				DATA_DATE 
				#, DATA_HOUR 
				, TILE_ID
				, RNC_ID
				#, CELL_INDOOR
				#, CELL_ID
				#, CLUSTER_ID
				#, SITE_ID
-- 				, FREQUENCY 
-- 				, UARFCN
				, CALL_TYPE
				, INDOOR
				, MOVING
				, CALL_STATUS
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		AND A.TILE_ID=B.TILE_ID
		AND A.RNC_ID=B.RNC_ID
		#AND A.CELL_INDOOR=B.CELL_INDOOR
		#AND A.CELL_ID=B.CELL_ID
		#AND A.CLUSTER_ID=B.CLUSTER_ID
		#AND A.SITE_ID=B.SITE_ID
-- 		AND A.FREQUENCY=B.FREQUENCY
-- 		AND A.UARFCN=B.UARFCN
		AND A.CALL_TYPE=B.CALL_TYPE
		AND A.INDOOR=B.INDOOR
		AND A.MOVING=B.MOVING
		AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_dy_c', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_ue_dy_c
 		(DATA_DATE,INDOOR,MOVING,RNC_ID,CELL_INDOOR,CLUSTER_ID,SITE_ID,FREQUENCY,UARFCN,CELL_ID,CALL_TYPE,CALL_STATUS,UE_CNT
		,CELL_LON,CELL_LAT
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			 B.DATA_DATE
			#, DATA_HOUR
			, B.INDOOR
			, B.MOVING
			#, B.TILE_ID
			, B.RNC_ID
			, B.CELL_INDOOR
			, B.CLUSTER_ID
			, B.SITE_ID
			, B.FREQUENCY 
			, B.UARFCN
			, B.CELL_ID
			, B.CALL_TYPE 
			, B.CALL_STATUS
			, CASE WHEN A.UE_CNT IS NULL AND B.UE_CNT IS NULL THEN NULL ELSE IFNULL(A.UE_CNT,0) + IFNULL(B.UE_CNT,0) END AS UE_CNT
			, B.CELL_LON,B.CELL_LAT
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_ue_dy_c a RIGHT JOIN 
		(
		 	SELECT
				 DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				, INDOOR AS INDOOR
				, MOVING AS MOVING
				#, TILE_ID AS TILE_ID
				, RNC_ID AS RNC_ID
				, CELL_INDOOR AS CELL_INDOOR
				, CLUSTER_ID AS CLUSTER_ID
				, SITE_ID AS SITE_ID
				, FREQUENCY  AS FREQUENCY
				, UARFCN AS UARFCN
				, CELL_ID AS CELL_ID
				, CALL_TYPE  AS CALL_TYPE
				, CALL_STATUS AS CALL_STATUS
				, SUM(UE_CNT) AS UE_CNT
				, CELL_LON AS CELL_LON,CELL_LAT AS CELL_LAT
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
			GROUP BY 
				DATA_DATE 
				#, DATA_HOUR 
				#, TILE_ID
				, RNC_ID
-- 				, CELL_INDOOR
				, CELL_ID
-- 				, CLUSTER_ID
-- 				, SITE_ID
-- 				, FREQUENCY 
-- 				, UARFCN
				, CALL_TYPE
				, INDOOR
				, MOVING
				, CALL_STATUS
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		#AND A.TILE_ID=B.TILE_ID
		AND A.RNC_ID=B.RNC_ID
-- 		AND A.CELL_INDOOR=B.CELL_INDOOR
		AND A.CELL_ID=B.CELL_ID
-- 		AND A.CLUSTER_ID=B.CLUSTER_ID
-- 		AND A.SITE_ID=B.SITE_ID
-- 		AND A.FREQUENCY=B.FREQUENCY
-- 		AND A.UARFCN=B.UARFCN
		AND A.CALL_TYPE=B.CALL_TYPE
		AND A.INDOOR=B.INDOOR
		AND A.MOVING=B.MOVING
		AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_dy_def', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_ue_dy_def
 		(DATA_DATE,TILE_ID,RNC_ID,CELL_ID,UE_CNT
		,CELL_LON,CELL_LAT
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			 B.DATA_DATE
			#, DATA_HOUR
			#, B.INDOOR
			#, B.MOVING
			, B.TILE_ID
			, B.RNC_ID
			#, B.CELL_INDOOR
			#, B.CLUSTER_ID
			#, B.SITE_ID
			#, B.FREQUENCY 
			#, B.UARFCN
			, B.CELL_ID
			#, B.CALL_TYPE 
			#, B.CALL_STATUS
			, CASE WHEN A.UE_CNT IS NULL AND B.UE_CNT IS NULL THEN NULL ELSE IFNULL(A.UE_CNT,0) + IFNULL(B.UE_CNT,0) END AS UE_CNT
			, B.CELL_LON,B.CELL_LAT
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_ue_dy_def a RIGHT JOIN 
		(
		 	SELECT
				 DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				#, INDOOR AS INDOOR
				#, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				, RNC_ID AS RNC_ID
				#, CELL_INDOOR AS CELL_INDOOR
				#, CLUSTER_ID AS CLUSTER_ID
				#, SITE_ID AS SITE_ID
				#, FREQUENCY  AS FREQUENCY
				#, UARFCN AS UARFCN
				, CELL_ID AS CELL_ID
				#, CALL_TYPE  AS CALL_TYPE
				#, CALL_STATUS AS CALL_STATUS
				, SUM(UE_CNT) AS UE_CNT
				, CELL_LON AS CELL_LON,CELL_LAT AS CELL_LAT
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
			GROUP BY 
				DATA_DATE 
				#, DATA_HOUR 
				, TILE_ID
				, RNC_ID
				#, CELL_INDOOR
				, CELL_ID
				#, CLUSTER_ID
				#, SITE_ID
				#, FREQUENCY 
				#, UARFCN
				#, CALL_TYPE
				#, INDOOR
				#, MOVING
				#, CALL_STATUS
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		AND A.TILE_ID=B.TILE_ID
		AND A.RNC_ID=B.RNC_ID
		#AND A.CELL_INDOOR=B.CELL_INDOOR
		AND A.CELL_ID=B.CELL_ID
		#AND A.CLUSTER_ID=B.CLUSTER_ID
		#AND A.SITE_ID=B.SITE_ID
		#AND A.FREQUENCY=B.FREQUENCY
		#AND A.UARFCN=B.UARFCN
		#AND A.CALL_TYPE=B.CALL_TYPE
		#AND A.INDOOR=B.INDOOR
		#AND A.MOVING=B.MOVING
		#AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_dy_t_def', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_ue_dy_t_def
 		(DATA_DATE,TILE_ID,RNC_ID,UE_CNT
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			 B.DATA_DATE
			#, DATA_HOUR
			#, B.INDOOR
			#, B.MOVING
			, B.TILE_ID
			, B.RNC_ID
			#, B.CELL_INDOOR
			#, B.CLUSTER_ID
			#, B.SITE_ID
			#, B.FREQUENCY 
			#, B.UARFCN
			#, B.CELL_ID
			#, B.CALL_TYPE 
			#, B.CALL_STATUS
			, CASE WHEN A.UE_CNT IS NULL AND B.UE_CNT IS NULL THEN NULL ELSE IFNULL(A.UE_CNT,0) + IFNULL(B.UE_CNT,0) END AS UE_CNT
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_ue_dy_t_def a RIGHT JOIN 
		(
		 	SELECT
				 DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				#, INDOOR AS INDOOR
				#, MOVING AS MOVING
				, TILE_ID AS TILE_ID
				, RNC_ID AS RNC_ID
				#, CELL_INDOOR AS CELL_INDOOR
				#, CLUSTER_ID AS CLUSTER_ID
				#, SITE_ID AS SITE_ID
				#, FREQUENCY  AS FREQUENCY
				#, UARFCN AS UARFCN
				#, CELL_ID AS CELL_ID
				#, CALL_TYPE  AS CALL_TYPE
				#, CALL_STATUS AS CALL_STATUS
				, SUM(UE_CNT) AS UE_CNT
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
			GROUP BY 
				DATA_DATE 
				#, DATA_HOUR 
				, TILE_ID
				, RNC_ID
				#, CELL_INDOOR
				#, CELL_ID
				#, CLUSTER_ID
				#, SITE_ID
				#, FREQUENCY 
				#, UARFCN
				#, CALL_TYPE
				#, INDOOR
				#, MOVING
				#, CALL_STATUS
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		AND A.TILE_ID=B.TILE_ID
		AND A.RNC_ID=B.RNC_ID
		#AND A.CELL_INDOOR=B.CELL_INDOOR
		#AND A.CELL_ID=B.CELL_ID
		#AND A.CLUSTER_ID=B.CLUSTER_ID
		#AND A.SITE_ID=B.SITE_ID
		#AND A.FREQUENCY=B.FREQUENCY
		#AND A.UARFCN=B.UARFCN
		#AND A.CALL_TYPE=B.CALL_TYPE
		#AND A.INDOOR=B.INDOOR
		#AND A.MOVING=B.MOVING
		#AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_End','INSERT DATA TO table_tile_ue_dy_c_def', NOW());
	SET @SqlCmd=CONCAT('REPLACE INTO ',GT_DB,'.table_tile_ue_dy_c_def
 		(DATA_DATE,RNC_ID,CELL_ID,UE_CNT
		,CELL_LON,CELL_LAT
-- 		,CALL_STATUS_BLOCK,CALL_STATUS_SUCCESS,CALL_STATUS_DROP,CALL_TYPE_SMS,CALL_TYPE_VOICE,CALL_TYPE_VEDIO
-- 		,CALL_TYPE_PS99,CALL_TYPE_HSPA,CALL_TYPE_MRAB,CALL_TYPE_PSOTHERS,CALL_TYPE_CS,CALL_TYPE_PS
	)
 		SELECT
			 B.DATA_DATE
			#, DATA_HOUR
			#, B.INDOOR
			#, B.MOVING
			#, B.TILE_ID
			, B.RNC_ID
			#, B.CELL_INDOOR
			#, B.CLUSTER_ID
			#, B.SITE_ID
			#, B.FREQUENCY 
			#, B.UARFCN
			, B.CELL_ID
			#, B.CALL_TYPE 
			#, B.CALL_STATUS
			, CASE WHEN A.UE_CNT IS NULL AND B.UE_CNT IS NULL THEN NULL ELSE IFNULL(A.UE_CNT,0) + IFNULL(B.UE_CNT,0) END AS UE_CNT
			, B.CELL_LON,B.CELL_LAT
-- 			, CASE WHEN A.CALL_STATUS_BLOCK IS NULL AND B.CALL_STATUS_BLOCK IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_BLOCK,0) + IFNULL(B.CALL_STATUS_BLOCK,0) END AS CALL_STATUS_BLOCK
-- 			, CASE WHEN A.CALL_STATUS_SUCCESS IS NULL AND B.CALL_STATUS_SUCCESS IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_SUCCESS,0) + IFNULL(B.CALL_STATUS_SUCCESS,0) END AS CALL_STATUS_SUCCESS
-- 			, CASE WHEN A.CALL_STATUS_DROP IS NULL AND B.CALL_STATUS_DROP IS NULL THEN NULL ELSE IFNULL(A.CALL_STATUS_DROP,0) + IFNULL(B.CALL_STATUS_DROP,0) END AS CALL_STATUS_DROP
-- 			, CASE WHEN A.CALL_TYPE_SMS IS NULL AND B.CALL_TYPE_SMS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_SMS,0) + IFNULL(B.CALL_TYPE_SMS,0) END AS CALL_TYPE_SMS
-- 			, CASE WHEN A.CALL_TYPE_VOICE IS NULL AND B.CALL_TYPE_VOICE IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VOICE,0) + IFNULL(B.CALL_TYPE_VOICE,0) END AS CALL_TYPE_VOICE
-- 			, CASE WHEN A.CALL_TYPE_VEDIO IS NULL AND B.CALL_TYPE_VEDIO IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_VEDIO,0) + IFNULL(B.CALL_TYPE_VEDIO,0) END AS CALL_TYPE_VEDIO
-- 			, CASE WHEN A.CALL_TYPE_PS99 IS NULL AND B.CALL_TYPE_PS99 IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS99,0) + IFNULL(B.CALL_TYPE_PS99,0) END AS CALL_TYPE_PS99
-- 			, CASE WHEN A.CALL_TYPE_HSPA IS NULL AND B.CALL_TYPE_HSPA IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_HSPA,0) + IFNULL(B.CALL_TYPE_HSPA,0) END AS CALL_TYPE_HSPA
-- 			, CASE WHEN A.CALL_TYPE_MRAB IS NULL AND B.CALL_TYPE_MRAB IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_MRAB,0) + IFNULL(B.CALL_TYPE_MRAB,0) END AS CALL_TYPE_MRAB
-- 			, CASE WHEN A.CALL_TYPE_PSOTHERS IS NULL AND B.CALL_TYPE_PSOTHERS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PSOTHERS,0) + IFNULL(B.CALL_TYPE_PSOTHERS,0) END AS CALL_TYPE_PSOTHERS
-- 			, CASE WHEN A.CALL_TYPE_CS IS NULL AND B.CALL_TYPE_CS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_CS,0) + IFNULL(B.CALL_TYPE_CS,0) END AS CALL_TYPE_CS
-- 			, CASE WHEN A.CALL_TYPE_PS IS NULL AND B.CALL_TYPE_PS IS NULL THEN NULL ELSE IFNULL(A.CALL_TYPE_PS,0) + IFNULL(B.CALL_TYPE_PS,0) END AS CALL_TYPE_PS
		FROM ',GT_DB,'.table_tile_ue_dy_c_def a RIGHT JOIN 
		(
		 	SELECT
				 DATA_DATE AS DATA_DATE
				#, DATA_HOUR
				#, INDOOR AS INDOOR
				#, MOVING AS MOVING
				#, TILE_ID AS TILE_ID
				, RNC_ID AS RNC_ID
				#, CELL_INDOOR AS CELL_INDOOR
				#, CLUSTER_ID AS CLUSTER_ID
				#, SITE_ID AS SITE_ID
				#, FREQUENCY  AS FREQUENCY
				#, UARFCN AS UARFCN
				, CELL_ID AS CELL_ID
				#, CALL_TYPE  AS CALL_TYPE
				#, CALL_STATUS AS CALL_STATUS
				, SUM(UE_CNT) AS UE_CNT
				, CELL_LON AS CELL_LON,CELL_LAT AS CELL_LAT
-- 				,SUM(CALL_STATUS_BLOCK) AS CALL_STATUS_BLOCK
-- 				,SUM(CALL_STATUS_SUCCESS) AS CALL_STATUS_SUCCESS
-- 				,SUM(CALL_STATUS_DROP) AS CALL_STATUS_DROP
-- 				,SUM(CALL_TYPE_SMS) AS CALL_TYPE_SMS
-- 				,SUM(CALL_TYPE_VOICE) AS CALL_TYPE_VOICE
-- 				,SUM(CALL_TYPE_VEDIO) AS CALL_TYPE_VEDIO
-- 				,SUM(CALL_TYPE_PS99) AS CALL_TYPE_PS99
-- 				,SUM(CALL_TYPE_HSPA) AS CALL_TYPE_HSPA
-- 				,SUM(CALL_TYPE_MRAB) AS CALL_TYPE_MRAB
-- 				,SUM(CALL_TYPE_PSOTHERS) AS CALL_TYPE_PSOTHERS
-- 				,SUM(CALL_TYPE_CS) AS CALL_TYPE_CS
-- 				,SUM(CALL_TYPE_PS) AS CALL_TYPE_PS
			FROM ',GT_DB,RUN,'.`tmp_table_tile_ue_',WORKER_ID,'`
			GROUP BY 
				DATA_DATE 
				#, DATA_HOUR 
				#, TILE_ID
				, RNC_ID
				#, CELL_INDOOR
				, CELL_ID
				#, CLUSTER_ID
				#, SITE_ID
				#, FREQUENCY 
				#, UARFCN
				#, CALL_TYPE
				#, INDOOR
				#, MOVING
				#, CALL_STATUS
		) B
		ON  A.DATA_DATE=B.DATA_DATE
		#AND A.TILE_ID=B.TILE_ID
		AND A.RNC_ID=B.RNC_ID
		#AND A.CELL_INDOOR=B.CELL_INDOOR
		AND A.CELL_ID=B.CELL_ID
		#AND A.CLUSTER_ID=B.CLUSTER_ID
		#AND A.SITE_ID=B.SITE_ID
		#AND A.FREQUENCY=B.FREQUENCY
		#AND A.UARFCN=B.UARFCN
		#AND A.CALL_TYPE=B.CALL_TYPE
		#AND A.INDOOR=B.INDOOR
		#AND A.MOVING=B.MOVING
		#AND A.CALL_STATUS=B.CALL_STATUS
		;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_UE_AGR','UPDATE TOTAL_INIT_CALL_CNT FROM table_tile_start', NOW());
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue A
				,',GT_DB,RUN,'.table_tile_start  B
				SET A.TOT_INIT_CALL_CNT =B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_t A
				,',GT_DB,RUN,'.table_tile_start_t  B
				SET A.TOT_INIT_CALL_CNT =B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				#AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_c A
				,',GT_DB,RUN,'.table_tile_start_c  B
				SET A.TOT_INIT_CALL_CNT =B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				AND A.DATA_HOUR=B.DATA_HOUR
				#AND A.TILE_ID=B.TILE_ID
				AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_def A
				,',GT_DB,RUN,'.table_tile_start_def  B
				SET A.TOT_INIT_CALL_CNT =B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				#AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				#AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				#AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				#AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_t_def A
				,',GT_DB,RUN,'.table_tile_start_t_def  B
				SET A.TOT_INIT_CALL_CNT =B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				#AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				#AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				#AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				#AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				#AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_c_def A
				,',GT_DB,RUN,'.table_tile_start_c_def  B
				SET A.TOT_INIT_CALL_CNT =B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				AND A.DATA_HOUR=B.DATA_HOUR
				#AND A.TILE_ID=B.TILE_ID
				#AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				#AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				#AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				#AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_dy A
				,',GT_DB,RUN,'.table_tile_start_dy  B
				SET A.TOT_INIT_CALL_CNT = B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				#AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				#AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_dy_t A
				,',GT_DB,RUN,'.table_tile_start_dy_t  B
				SET A.TOT_INIT_CALL_CNT = B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				#AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				#AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				#AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_dy_c A
				,',GT_DB,RUN,'.table_tile_start_dy_c  B
				SET A.TOT_INIT_CALL_CNT = B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				#AND A.DATA_HOUR=B.DATA_HOUR
				#AND A.TILE_ID=B.TILE_ID
				AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				#AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_dy_def A
				,',GT_DB,RUN,'.table_tile_start_dy_def  B
				SET A.TOT_INIT_CALL_CNT = B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				#AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				#AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				#AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				#AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				#AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				#AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_dy_t_def A
				,',GT_DB,RUN,'.table_tile_start_dy_t_def  B
				SET A.TOT_INIT_CALL_CNT = B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				#AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				#AND A.DATA_HOUR=B.DATA_HOUR
				AND A.TILE_ID=B.TILE_ID
				#AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				#AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				#AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				#AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				#AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('	UPDATE  ',GT_DB,RUN,'.table_tile_ue_dy_c_def A
				,',GT_DB,RUN,'.table_tile_start_dy_c_def  B
				SET A.TOT_INIT_CALL_CNT = B.CALL_CNT
				WHERE A.RNC_ID=B.RNC_ID
				AND A.CELL_ID=B.CELL_ID
				AND A.DATA_DATE=B.DATA_DATE
				#AND A.DATA_HOUR=B.DATA_HOUR
				#AND A.TILE_ID=B.TILE_ID
				#AND IFNULL(A.CALL_TYPE,65535)=IFNULL(B.CALL_TYPE,65535)
				#AND IFNULL(A.INDOOR,65535)=IFNULL(B.INDOOR,65535)
				#AND IFNULL(A.MOVING,65535)=IFNULL(B.MOVING,65535)
				#AND IFNULL(A.CALL_STATUS,65535)=IFNULL(B.CALL_STATUS,65535)
				#AND A.DATA_HOUR >= ',STARTHOUR,' AND A.DATA_HOUR < ',ENDHOUR,'
				;');
	PREPARE Stmt FROM @SqlCmd;
	EXECUTE Stmt;
	DEALLOCATE PREPARE Stmt;
	
	SET @SqlCmd=CONCAT('DROP TEMPORARY TABLE  IF EXISTS ',GT_DB,RUN,'.tmp_table_tile_ue_',WORKER_ID,';');
	PREPARE stmt FROM @sqlcmd;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	INSERT INTO gt_gw_main.sp_log VALUES(O_GT_DB,'SP_Sub_Generate_UE_AGR',CONCAT('Done: ',TIMESTAMPDIFF(SECOND,START_TIME,SYSDATE()),' seconds.'), NOW());
